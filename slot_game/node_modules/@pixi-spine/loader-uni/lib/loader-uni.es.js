/* eslint-disable */
 
/*!
 * @pixi-spine/loader-uni - v3.0.7
 * Compiled Thu, 05 Aug 2021 12:00:23 UTC
 *
 * @pixi-spine/loader-uni is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 * 
 * Copyright 2019-2020, Mat Groves, All Rights Reserved
 */
import { AbstractSpineParser } from '@pixi-spine/loader-base';
import { BinaryInput, SpineBase } from '@pixi-spine/base';
import { Loader } from '@pixi/loaders';
import * as spine38 from '@pixi-spine/runtime-3.8';
import * as spine37 from '@pixi-spine/runtime-3.7';
import * as spine40 from '@pixi-spine/runtime-4.0';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

/**
 * @public
 */
var SPINE_VERSION;
(function (SPINE_VERSION) {
    SPINE_VERSION[SPINE_VERSION["UNKNOWN"] = 0] = "UNKNOWN";
    SPINE_VERSION[SPINE_VERSION["VER37"] = 37] = "VER37";
    SPINE_VERSION[SPINE_VERSION["VER38"] = 38] = "VER38";
    SPINE_VERSION[SPINE_VERSION["VER40"] = 40] = "VER40";
})(SPINE_VERSION || (SPINE_VERSION = {}));
/**
 * @public
 */
function detectSpineVersion(version) {
    var ver3 = version.substr(0, 3);
    var verNum = Math.floor(+ver3 * 10 + 1e-3);
    if (ver3 === '3.7') {
        return SPINE_VERSION.VER37;
    }
    if (ver3 === '3.8') {
        return SPINE_VERSION.VER38;
    }
    if (ver3 === '4.0') {
        return SPINE_VERSION.VER40;
    }
    // try parse old versions with 3.7
    if (verNum < SPINE_VERSION.VER37) {
        return SPINE_VERSION.VER37;
    }
    return SPINE_VERSION.UNKNOWN;
}

var UniBinaryParser = /** @class */ (function () {
    function UniBinaryParser() {
        this.scale = 1;
    }
    UniBinaryParser.prototype.readSkeletonData = function (atlas, dataToParse) {
        var input = new BinaryInput(dataToParse);
        input.readString();
        var version = input.readString();
        var ver = detectSpineVersion(version);
        var parser = null;
        if (ver === SPINE_VERSION.VER38) {
            parser = new spine38.SkeletonBinary(new spine38.AtlasAttachmentLoader(atlas));
        }
        input = new BinaryInput(dataToParse);
        input.readInt32();
        input.readInt32();
        version = input.readString();
        ver = detectSpineVersion(version);
        if (ver === SPINE_VERSION.VER40) {
            parser = new spine40.SkeletonBinary(new spine40.AtlasAttachmentLoader(atlas));
        }
        if (!parser) {
            var error = "Unsupported version of spine model " + version + ", please update pixi-spine";
            console.error(error);
        }
        parser.scale = this.scale;
        return parser.readSkeletonData(dataToParse);
    };
    return UniBinaryParser;
}());
var UniJsonParser = /** @class */ (function () {
    function UniJsonParser() {
        this.scale = 1;
    }
    UniJsonParser.prototype.readSkeletonData = function (atlas, dataToParse) {
        var version = dataToParse.skeleton.spine;
        var ver = detectSpineVersion(version);
        var parser = null;
        if (ver === SPINE_VERSION.VER37) {
            parser = new spine37.SkeletonJson(new spine37.AtlasAttachmentLoader(atlas));
        }
        if (ver === SPINE_VERSION.VER38) {
            parser = new spine38.SkeletonJson(new spine38.AtlasAttachmentLoader(atlas));
        }
        if (ver === SPINE_VERSION.VER40) {
            parser = new spine40.SkeletonJson(new spine40.AtlasAttachmentLoader(atlas));
        }
        if (!parser) {
            var error = "Unsupported version of spine model " + version + ", please update pixi-spine";
            console.error(error);
        }
        parser.scale = this.scale;
        return parser.readSkeletonData(dataToParse);
    };
    return UniJsonParser;
}());
/**
 * @public
 */
var SpineParser = /** @class */ (function (_super) {
    __extends(SpineParser, _super);
    function SpineParser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SpineParser.prototype.createBinaryParser = function () {
        return new UniBinaryParser();
    };
    SpineParser.prototype.createJsonParser = function () {
        return new UniJsonParser();
    };
    SpineParser.prototype.parseData = function (resource, parser, atlas, dataToParse) {
        var parserCast = parser;
        resource.spineData = parserCast.readSkeletonData(atlas, dataToParse);
        resource.spineAtlas = atlas;
    };
    SpineParser.registerLoaderPlugin = function () {
        Loader.registerPlugin(SpineParser);
    };
    SpineParser.use = new SpineParser().genMiddleware().use;
    return SpineParser;
}(AbstractSpineParser));

/**
 * @public
 */
var Spine = /** @class */ (function (_super) {
    __extends(Spine, _super);
    function Spine() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Spine.prototype.createSkeleton = function (spineData) {
        var ver = detectSpineVersion(spineData.version);
        var spine = null;
        if (ver === SPINE_VERSION.VER37) {
            spine = spine37;
        }
        if (ver === SPINE_VERSION.VER38) {
            spine = spine38;
        }
        if (ver === SPINE_VERSION.VER40) {
            spine = spine40;
        }
        if (!spine) {
            var error = "Cant detect version of spine model " + spineData.version;
            console.error(error);
        }
        this.skeleton = new spine.Skeleton(spineData);
        this.skeleton.updateWorldTransform();
        this.stateData = new spine.AnimationStateData(spineData);
        this.state = new spine.AnimationState(this.stateData);
    };
    return Spine;
}(SpineBase));

export { SPINE_VERSION, Spine, SpineParser, detectSpineVersion };
//# sourceMappingURL=loader-uni.es.js.map
