{"version":3,"file":"loader-base.js","sources":["../src/loaders.ts"],"sourcesContent":["import {IResourceMetadata, Loader, LoaderResource} from \"@pixi/loaders\";\nimport {BaseTexture, Texture} from \"@pixi/core\";\nimport {ISkeletonParser, TextureAtlas} from \"@pixi-spine/base\";\nimport {ALPHA_MODES} from \"@pixi/constants\";\n\nfunction isJson(resource: LoaderResource) {\n    return resource.type === LoaderResource.TYPE.JSON;\n}\n\nfunction isBuffer(resource: LoaderResource) {\n    return resource.xhrType === (LoaderResource as any).XHR_RESPONSE_TYPE.BUFFER;\n}\n\nLoaderResource.setExtensionXhrType('skel', LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\n\n/**\n * @public\n */\nexport abstract class AbstractSpineParser {\n    abstract createJsonParser(): ISkeletonParser;\n\n    abstract createBinaryParser(): ISkeletonParser;\n\n    abstract parseData(resource: LoaderResource, parser: ISkeletonParser, atlas: TextureAtlas, dataToParse: any): void;\n\n    genMiddleware() {\n        const self = this;\n\n        return {\n            use(this: Loader, resource: LoaderResource, next: () => any) {\n                // skip if no data, its not json, or it isn't atlas data\n                if (!resource.data) {\n                    return next();\n                }\n\n                const isJsonSpineModel = isJson(resource) && resource.data.bones;\n                const isBinarySpineModel = isBuffer(resource) && (resource.extension === 'skel' || resource.metadata\n                    && (resource.metadata as any).spineMetadata);\n\n                if (!isJsonSpineModel && !isBinarySpineModel) {\n                    return next();\n                }\n\n                let parser: ISkeletonParser = null;\n                let dataToParse = resource.data;\n\n                if (isJsonSpineModel) {\n                    parser = self.createJsonParser();\n                } else {\n                    parser = self.createBinaryParser();\n                    if (resource.data instanceof ArrayBuffer) {\n                        dataToParse = new Uint8Array(resource.data);\n                    }\n                }\n\n                const metadata = (resource.metadata || {}) as IResourceMetadata;\n                const metadataSkeletonScale = metadata ? (metadata as any).spineSkeletonScale : null;\n\n                if (metadataSkeletonScale) {\n                    parser.scale = metadataSkeletonScale;\n                }\n\n                const metadataAtlas = metadata.spineAtlas;\n                if (metadataAtlas === false) {\n                    return next();\n                }\n                if (metadataAtlas && metadataAtlas.pages) {\n                    self.parseData(resource, parser, metadataAtlas, dataToParse);\n                    return next();\n                }\n\n                const metadataAtlasSuffix = metadata.spineAtlasSuffix || '.atlas';\n\n                /**\n                 * use a bit of hackery to load the atlas file, here we assume that the .json, .atlas and .png files\n                 * that correspond to the spine file are in the same base URL and that the .json and .atlas files\n                 * have the same name\n                 */\n                let atlasPath = resource.url;\n                let queryStringPos = atlasPath.indexOf('?');\n                if (queryStringPos > 0) {\n                    //remove querystring\n                    atlasPath = atlasPath.substr(0, queryStringPos)\n                }\n                atlasPath = atlasPath.substr(0, atlasPath.lastIndexOf('.')) + metadataAtlasSuffix;\n// use atlas path as a params. (no need to use same atlas file name with json file name)\n                if (metadata.spineAtlasFile) {\n                    atlasPath = metadata.spineAtlasFile;\n                }\n\n//remove the baseUrl\n                atlasPath = atlasPath.replace(this.baseUrl, '');\n\n                const atlasOptions = {\n                    crossOrigin: resource.crossOrigin,\n                    xhrType: LoaderResource.XHR_RESPONSE_TYPE.TEXT,\n                    metadata: metadata.spineMetadata || null,\n                    parentResource: resource\n                };\n                const imageOptions = {\n                    crossOrigin: resource.crossOrigin,\n                    metadata: metadata.imageMetadata || null,\n                    parentResource: resource\n                };\n                let baseUrl = resource.url.substr(0, resource.url.lastIndexOf('/') + 1);\n//remove the baseUrl\n                baseUrl = baseUrl.replace(this.baseUrl, '');\n\n                const namePrefix = metadata.imageNamePrefix || (resource.name + '_atlas_page_');\n\n                const adapter = metadata.images ? staticImageLoader(metadata.images)\n                    : metadata.image ? staticImageLoader({'default': metadata.image})\n                        : metadata.imageLoader ? metadata.imageLoader(this, namePrefix, baseUrl, imageOptions)\n                            : imageLoaderAdapter(this, namePrefix, baseUrl, imageOptions);\n\n                function createSkeletonWithRawAtlas(rawData: string) {\n                    new TextureAtlas(rawData, adapter, function(spineAtlas) {\n                        if (spineAtlas) {\n                            self.parseData(resource, parser, spineAtlas, dataToParse);\n                        }\n                        next();\n                    });\n                }\n\n                if (metadata.atlasRawData) {\n                    createSkeletonWithRawAtlas(metadata.atlasRawData)\n                } else {\n                    this.add(resource.name + '_atlas', atlasPath, atlasOptions, function (atlasResource: any) {\n                        if (!atlasResource.error) {\n                            createSkeletonWithRawAtlas(atlasResource.data);\n                        } else {\n                            next();\n                        }\n                    });\n                }\n            }\n        }\n    }\n}\n\n/**\n * @public\n */\nexport function imageLoaderAdapter(loader: any, namePrefix: any, baseUrl: any, imageOptions: any) {\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length - 1)) {\n        baseUrl += '/';\n    }\n    return function (line: string, callback: (baseTexture: BaseTexture) => any) {\n        const name = namePrefix + line;\n        const url = baseUrl + line;\n\n        const cachedResource = loader.resources[name];\n        if (cachedResource) {\n            const done = () => {\n                callback(cachedResource.texture.baseTexture)\n            }\n            if (cachedResource.texture) {\n                done();\n            } else {\n                cachedResource.onAfterMiddleware.add(done);\n            }\n        } else {\n            loader.add(name, url, imageOptions, (resource: LoaderResource) => {\n                if (!resource.error) {\n                    if (line.indexOf('-pma.') >= 0) {\n                        resource.texture.baseTexture.alphaMode = ALPHA_MODES.PMA;\n                    }\n\n                    callback(resource.texture.baseTexture);\n                } else {\n                    callback(null);\n                }\n            });\n        }\n    }\n}\n\n/**\n * @public\n */\nexport function syncImageLoaderAdapter(baseUrl: any, crossOrigin: any) {\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length - 1)) {\n        baseUrl += '/';\n    }\n    return function (line: any, callback: any) {\n        callback(BaseTexture.from(line, crossOrigin));\n    }\n}\n\n/**\n * @public\n */\nexport function staticImageLoader(pages: { [key: string]: (BaseTexture | Texture) }) {\n    return function (line: any, callback: any) {\n        let page = pages[line] || pages['default'] as any;\n        if (page && page.baseTexture)\n            callback(page.baseTexture);\n        else\n            callback(page);\n    }\n}\n"],"names":["LoaderResource","TextureAtlas","ALPHA_MODES","BaseTexture"],"mappings":"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"}