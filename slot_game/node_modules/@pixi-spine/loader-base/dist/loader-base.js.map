{"version":3,"file":"loader-base.js","sources":["../src/loaders.ts","../src/index.ts"],"sourcesContent":["import {IResourceMetadata, Loader, LoaderResource} from \"@pixi/loaders\";\nimport {BaseTexture, Texture} from \"@pixi/core\";\nimport {ISkeletonParser, TextureAtlas} from \"@pixi-spine/base\";\nimport {ALPHA_MODES} from \"@pixi/constants\";\n\nfunction isJson(resource: LoaderResource) {\n    return resource.type === LoaderResource.TYPE.JSON;\n}\n\nfunction isBuffer(resource: LoaderResource) {\n    return resource.xhrType === (LoaderResource as any).XHR_RESPONSE_TYPE.BUFFER;\n}\n\nLoaderResource.setExtensionXhrType('skel', LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\n\n/**\n * @public\n */\nexport abstract class AbstractSpineParser {\n    abstract createJsonParser(): ISkeletonParser;\n\n    abstract createBinaryParser(): ISkeletonParser;\n\n    abstract parseData(resource: LoaderResource, parser: ISkeletonParser, atlas: TextureAtlas, dataToParse: any): void;\n\n    genMiddleware() {\n        const self = this;\n\n        return {\n            use(this: Loader, resource: LoaderResource, next: () => any) {\n                // skip if no data, its not json, or it isn't atlas data\n                if (!resource.data) {\n                    return next();\n                }\n\n                const isJsonSpineModel = isJson(resource) && resource.data.bones;\n                const isBinarySpineModel = isBuffer(resource) && (resource.extension === 'skel' || resource.metadata\n                    && (resource.metadata as any).spineMetadata);\n\n                if (!isJsonSpineModel && !isBinarySpineModel) {\n                    return next();\n                }\n\n                let parser: ISkeletonParser = null;\n                let dataToParse = resource.data;\n\n                if (isJsonSpineModel) {\n                    parser = self.createJsonParser();\n                } else {\n                    parser = self.createBinaryParser();\n                    if (resource.data instanceof ArrayBuffer) {\n                        dataToParse = new Uint8Array(resource.data);\n                    }\n                }\n\n                const metadata = (resource.metadata || {}) as IResourceMetadata;\n                const metadataSkeletonScale = metadata ? (metadata as any).spineSkeletonScale : null;\n\n                if (metadataSkeletonScale) {\n                    parser.scale = metadataSkeletonScale;\n                }\n\n                const metadataAtlas = metadata.spineAtlas;\n                if (metadataAtlas === false) {\n                    return next();\n                }\n                if (metadataAtlas && metadataAtlas.pages) {\n                    self.parseData(resource, parser, metadataAtlas, dataToParse);\n                    return next();\n                }\n\n                const metadataAtlasSuffix = metadata.spineAtlasSuffix || '.atlas';\n\n                /**\n                 * use a bit of hackery to load the atlas file, here we assume that the .json, .atlas and .png files\n                 * that correspond to the spine file are in the same base URL and that the .json and .atlas files\n                 * have the same name\n                 */\n                let atlasPath = resource.url;\n                let queryStringPos = atlasPath.indexOf('?');\n                if (queryStringPos > 0) {\n                    //remove querystring\n                    atlasPath = atlasPath.substr(0, queryStringPos)\n                }\n                atlasPath = atlasPath.substr(0, atlasPath.lastIndexOf('.')) + metadataAtlasSuffix;\n// use atlas path as a params. (no need to use same atlas file name with json file name)\n                if (metadata.spineAtlasFile) {\n                    atlasPath = metadata.spineAtlasFile;\n                }\n\n//remove the baseUrl\n                atlasPath = atlasPath.replace(this.baseUrl, '');\n\n                const atlasOptions = {\n                    crossOrigin: resource.crossOrigin,\n                    xhrType: LoaderResource.XHR_RESPONSE_TYPE.TEXT,\n                    metadata: metadata.spineMetadata || null,\n                    parentResource: resource\n                };\n                const imageOptions = {\n                    crossOrigin: resource.crossOrigin,\n                    metadata: metadata.imageMetadata || null,\n                    parentResource: resource\n                };\n                let baseUrl = resource.url.substr(0, resource.url.lastIndexOf('/') + 1);\n//remove the baseUrl\n                baseUrl = baseUrl.replace(this.baseUrl, '');\n\n                const namePrefix = metadata.imageNamePrefix || (resource.name + '_atlas_page_');\n\n                const adapter = metadata.images ? staticImageLoader(metadata.images)\n                    : metadata.image ? staticImageLoader({'default': metadata.image})\n                        : metadata.imageLoader ? metadata.imageLoader(this, namePrefix, baseUrl, imageOptions)\n                            : imageLoaderAdapter(this, namePrefix, baseUrl, imageOptions);\n\n                function createSkeletonWithRawAtlas(rawData: string) {\n                    new TextureAtlas(rawData, adapter, function(spineAtlas) {\n                        if (spineAtlas) {\n                            self.parseData(resource, parser, spineAtlas, dataToParse);\n                        }\n                        next();\n                    });\n                }\n\n                if (metadata.atlasRawData) {\n                    createSkeletonWithRawAtlas(metadata.atlasRawData)\n                } else {\n                    this.add(resource.name + '_atlas', atlasPath, atlasOptions, function (atlasResource: any) {\n                        if (!atlasResource.error) {\n                            createSkeletonWithRawAtlas(atlasResource.data);\n                        } else {\n                            next();\n                        }\n                    });\n                }\n            }\n        }\n    }\n}\n\n/**\n * @public\n */\nexport function imageLoaderAdapter(loader: any, namePrefix: any, baseUrl: any, imageOptions: any) {\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length - 1)) {\n        baseUrl += '/';\n    }\n    return function (line: string, callback: (baseTexture: BaseTexture) => any) {\n        const name = namePrefix + line;\n        const url = baseUrl + line;\n\n        const cachedResource = loader.resources[name];\n        if (cachedResource) {\n            const done = () => {\n                callback(cachedResource.texture.baseTexture)\n            }\n            if (cachedResource.texture) {\n                done();\n            } else {\n                cachedResource.onAfterMiddleware.add(done);\n            }\n        } else {\n            loader.add(name, url, imageOptions, (resource: LoaderResource) => {\n                if (!resource.error) {\n                    if (line.indexOf('-pma.') >= 0) {\n                        resource.texture.baseTexture.alphaMode = ALPHA_MODES.PMA;\n                    }\n\n                    callback(resource.texture.baseTexture);\n                } else {\n                    callback(null);\n                }\n            });\n        }\n    }\n}\n\n/**\n * @public\n */\nexport function syncImageLoaderAdapter(baseUrl: any, crossOrigin: any) {\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length - 1)) {\n        baseUrl += '/';\n    }\n    return function (line: any, callback: any) {\n        callback(BaseTexture.from(line, crossOrigin));\n    }\n}\n\n/**\n * @public\n */\nexport function staticImageLoader(pages: { [key: string]: (BaseTexture | Texture) }) {\n    return function (line: any, callback: any) {\n        let page = pages[line] || pages['default'] as any;\n        if (page && page.baseTexture)\n            callback(page.baseTexture);\n        else\n            callback(page);\n    }\n}\n","/// <reference path=\"../global.d.ts\" />\r\nexport * from './loaders';\r\n"],"names":["LoaderResource","TextureAtlas","ALPHA_MODES","BaseTexture"],"mappings":"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"}