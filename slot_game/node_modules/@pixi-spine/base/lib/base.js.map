{"version":3,"file":"base.js","sources":["../src/core/AttachmentType.ts","../src/core/BinaryInput.ts","../../../common/temp/node_modules/.pnpm/registry.npmjs.org/tslib/2.2.0/node_modules/tslib/tslib.es6.js","../src/core/TextureRegion.ts","../src/core/TextureAtlas.ts","../src/core/Utils.ts","../src/settings.ts","../src/SpineBase.ts"],"sourcesContent":["\r\n/**\r\n * @public\r\n */\r\nexport enum AttachmentType {\r\n    Region, BoundingBox, Mesh, LinkedMesh, Path, Point, Clipping\r\n}\r\n","/**\r\n * @public\r\n */\r\nexport class BinaryInput {\r\n    constructor(data: Uint8Array, public strings = new Array<string>(), private index: number = 0, private buffer = new DataView(data.buffer)) {\r\n\r\n    }\r\n\r\n    readByte(): number {\r\n        return this.buffer.getInt8(this.index++);\r\n    }\r\n\r\n    readUnsignedByte(): number {\r\n        return this.buffer.getUint8(this.index++);\r\n    }\r\n\r\n    readShort(): number {\r\n        let value = this.buffer.getInt16(this.index);\r\n        this.index += 2;\r\n        return value;\r\n    }\r\n\r\n    readInt32(): number {\r\n        let value = this.buffer.getInt32(this.index)\r\n        this.index += 4;\r\n        return value;\r\n    }\r\n\r\n    readInt(optimizePositive: boolean) {\r\n        let b = this.readByte();\r\n        let result = b & 0x7F;\r\n        if ((b & 0x80) != 0) {\r\n            b = this.readByte();\r\n            result |= (b & 0x7F) << 7;\r\n            if ((b & 0x80) != 0) {\r\n                b = this.readByte();\r\n                result |= (b & 0x7F) << 14;\r\n                if ((b & 0x80) != 0) {\r\n                    b = this.readByte();\r\n                    result |= (b & 0x7F) << 21;\r\n                    if ((b & 0x80) != 0) {\r\n                        b = this.readByte();\r\n                        result |= (b & 0x7F) << 28;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return optimizePositive ? result : ((result >>> 1) ^ -(result & 1));\r\n    }\r\n\r\n    readStringRef (): string {\r\n        let index = this.readInt(true);\r\n        return index == 0 ? null : this.strings[index - 1];\r\n    }\r\n\r\n    readString (): string {\r\n        let byteCount = this.readInt(true);\r\n        switch (byteCount) {\r\n            case 0:\r\n                return null;\r\n            case 1:\r\n                return \"\";\r\n        }\r\n        byteCount--;\r\n        let chars = \"\";\r\n        for (let i = 0; i < byteCount;) {\r\n            let b = this.readByte();\r\n            switch (b >> 4) {\r\n                case 12:\r\n                case 13:\r\n                    chars += String.fromCharCode(((b & 0x1F) << 6 | this.readByte() & 0x3F));\r\n                    i += 2;\r\n                    break;\r\n                case 14:\r\n                    chars += String.fromCharCode(((b & 0x0F) << 12 | (this.readByte() & 0x3F) << 6 | this.readByte() & 0x3F));\r\n                    i += 3;\r\n                    break;\r\n                default:\r\n                    chars += String.fromCharCode(b);\r\n                    i++;\r\n            }\r\n        }\r\n        return chars;\r\n    }\r\n\r\n    readFloat (): number {\r\n        let value = this.buffer.getFloat32(this.index);\r\n        this.index += 4;\r\n        return value;\r\n    }\r\n\r\n    readBoolean (): boolean {\r\n        return this.readByte() != 0;\r\n    }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","\nimport { Texture } from '@pixi/core';\nimport { Rectangle } from '@pixi/math';\n\n/**\n * @public\n */\nexport function filterFromString (text: string): TextureFilter {\n    switch (text.toLowerCase()) {\n        case \"nearest\": return TextureFilter.Nearest;\n        case \"linear\": return TextureFilter.Linear;\n        case \"mipmap\": return TextureFilter.MipMap;\n        case \"mipmapnearestnearest\": return TextureFilter.MipMapNearestNearest;\n        case \"mipmaplinearnearest\": return TextureFilter.MipMapLinearNearest;\n        case \"mipmapnearestlinear\": return TextureFilter.MipMapNearestLinear;\n        case \"mipmaplinearlinear\": return TextureFilter.MipMapLinearLinear;\n        default: throw new Error(`Unknown texture filter ${text}`);\n    }\n}\n\n/**\n * @public\n */\nexport function wrapFromString (text: string): TextureWrap {\n    switch (text.toLowerCase()) {\n        case \"mirroredtepeat\": return TextureWrap.MirroredRepeat;\n        case \"clamptoedge\": return TextureWrap.ClampToEdge;\n        case \"repeat\": return TextureWrap.Repeat;\n        default: throw new Error(`Unknown texture wrap ${text}`);\n    }\n}\n\n/**\n * @public\n */\nexport enum TextureFilter {\n    Nearest = 9728, // WebGLRenderingContext.NEAREST\n    Linear = 9729, // WebGLRenderingContext.LINEAR\n    MipMap = 9987, // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR\n    MipMapNearestNearest = 9984, // WebGLRenderingContext.NEAREST_MIPMAP_NEAREST\n    MipMapLinearNearest = 9985, // WebGLRenderingContext.LINEAR_MIPMAP_NEAREST\n    MipMapNearestLinear = 9986, // WebGLRenderingContext.NEAREST_MIPMAP_LINEAR\n    MipMapLinearLinear = 9987 // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR\n}\n\n/**\n * @public\n */\nexport enum TextureWrap {\n    MirroredRepeat = 33648, // WebGLRenderingContext.MIRRORED_REPEAT\n    ClampToEdge = 33071, // WebGLRenderingContext.CLAMP_TO_EDGE\n    Repeat = 10497 // WebGLRenderingContext.REPEAT\n}\n\n/**\n * @public\n */\nexport class TextureRegion {\n    texture: Texture;\n\n    //thats for overrides\n    size: Rectangle = null;\n\n    names: string[] = null;\n    values: number[][] = null;\n\n    get width(): number {\n        const tex = this.texture;\n        if (tex.trim) {\n            return tex.trim.width;\n        }\n        return tex.orig.width;\n    }\n\n    get height(): number {\n        const tex = this.texture;\n        if (tex.trim) {\n            return tex.trim.height;\n        }\n        return tex.orig.height;\n    }\n\n    get u(): number {\n        return (this.texture as any)._uvs.x0;\n    }\n\n    get v(): number {\n        return (this.texture as any)._uvs.y0;\n    }\n\n    get u2(): number {\n        return (this.texture as any)._uvs.x2;\n    }\n\n    get v2(): number {\n        return (this.texture as any)._uvs.y2;\n    }\n\n    get offsetX(): number {\n        const tex = this.texture;\n        return tex.trim ? tex.trim.x : 0;\n    }\n\n    get offsetY(): number {\n        // console.warn(\"Deprecation Warning: @Hackerham: I guess, if you are using PIXI-SPINE ATLAS region.offsetY, you want a texture, right? Use region.texture from now on.\");\n        return this.spineOffsetY;\n    }\n\n    get pixiOffsetY(): number {\n        const tex = this.texture;\n        return tex.trim ? tex.trim.y : 0;\n    }\n\n    get spineOffsetY(): number {\n        let tex = this.texture;\n        return this.originalHeight - this.height - (tex.trim ? tex.trim.y : 0);\n    }\n\n    get originalWidth(): number {\n        return this.texture.orig.width;\n    }\n\n    get originalHeight(): number {\n        return this.texture.orig.height;\n    }\n\n    get x(): number {\n        return this.texture.frame.x;\n    }\n\n    get y(): number {\n        return this.texture.frame.y;\n    }\n\n    get rotate(): boolean {\n        return this.texture.rotate !== 0;\n    }\n\n    get degrees() {\n        return (360 - this.texture.rotate * 45) % 360;\n    }\n}\n","import {SCALE_MODES, MIPMAP_MODES, ALPHA_MODES} from '@pixi/constants';\r\nimport {Texture} from '@pixi/core';\r\nimport {Rectangle} from '@pixi/math';\r\nimport {TextureRegion, TextureWrap, TextureFilter, filterFromString} from './TextureRegion';\r\nimport {Map, Disposable} from './Utils';\r\n\r\nimport type {BaseTexture} from '@pixi/core';\r\n\r\nclass RegionFields {\r\n    x = 0;\r\n    y = 0;\r\n    width = 0;\r\n    height = 0;\r\n    offsetX = 0;\r\n    offsetY = 0;\r\n    originalWidth = 0;\r\n    originalHeight = 0;\r\n    rotate = 0;\r\n    index = 0;\r\n}\r\n/**\r\n * @public\r\n */\r\nexport class TextureAtlas implements Disposable {\r\n    pages = new Array<TextureAtlasPage>();\r\n    regions = new Array<TextureAtlasRegion>();\r\n\r\n    constructor(atlasText?: string, textureLoader?: (path: string, loaderFunction: (tex: BaseTexture) => any) => any, callback?: (obj: TextureAtlas) => any) {\r\n        if (atlasText) {\r\n            this.addSpineAtlas(atlasText, textureLoader, callback);\r\n        }\r\n    }\r\n\r\n    addTexture(name: string, texture: Texture) {\r\n        let pages = this.pages;\r\n        let page: TextureAtlasPage = null;\r\n        for (let i = 0; i < pages.length; i++) {\r\n            if (pages[i].baseTexture === texture.baseTexture) {\r\n                page = pages[i];\r\n                break;\r\n            }\r\n        }\r\n        if (page === null) {\r\n            page = new TextureAtlasPage();\r\n            page.name = 'texturePage';\r\n            let baseTexture = texture.baseTexture;\r\n            page.width = baseTexture.realWidth;\r\n            page.height = baseTexture.realHeight;\r\n            page.baseTexture = baseTexture;\r\n            //those fields are not relevant in Pixi\r\n            page.minFilter = page.magFilter = TextureFilter.Nearest;\r\n            page.uWrap = TextureWrap.ClampToEdge;\r\n            page.vWrap = TextureWrap.ClampToEdge;\r\n            pages.push(page);\r\n        }\r\n        let region = new TextureAtlasRegion();\r\n        region.name = name;\r\n        region.page = page;\r\n        region.texture = texture;\r\n        region.index = -1;\r\n        this.regions.push(region);\r\n        return region;\r\n    }\r\n\r\n    addTextureHash(textures: Map<Texture>, stripExtension: boolean) {\r\n        for (let key in textures) {\r\n            if (textures.hasOwnProperty(key)) {\r\n                this.addTexture(stripExtension && key.indexOf('.') !== -1 ? key.substr(0, key.lastIndexOf('.')) : key, textures[key]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public addSpineAtlas(atlasText: string, textureLoader: (path: string, loaderFunction: (tex: BaseTexture) => any) => any, callback: (obj: TextureAtlas) => any) {\r\n        return this.load(atlasText, textureLoader, callback);\r\n    }\r\n\r\n    private load(atlasText: string, textureLoader: (path: string, loaderFunction: (tex: BaseTexture) => any) => any, callback: (obj: TextureAtlas) => any) {\r\n        if (textureLoader == null)\r\n            throw new Error(\"textureLoader cannot be null.\");\r\n\r\n        let reader = new TextureAtlasReader(atlasText);\r\n        let entry = new Array<string>(4);\r\n        let page: TextureAtlasPage = null;\r\n        let pageFields: Map<Function> = {};\r\n        let region: RegionFields = null;\r\n        pageFields[\"size\"] = () => {\r\n            page.width = parseInt(entry[1]);\r\n            page.height = parseInt(entry[2]);\r\n        };\r\n        pageFields[\"format\"] = () => {\r\n            // page.format = Format[tuple[0]]; we don't need format in WebGL\r\n        };\r\n        pageFields[\"filter\"] = () => {\r\n            page.minFilter = filterFromString(entry[1]);\r\n            page.magFilter = filterFromString(entry[2]);\r\n        };\r\n        pageFields[\"repeat\"] = () => {\r\n            if (entry[1].indexOf('x') != -1) page.uWrap = TextureWrap.Repeat;\r\n            if (entry[1].indexOf('y') != -1) page.vWrap = TextureWrap.Repeat;\r\n        };\r\n        pageFields[\"pma\"] = () => {\r\n            page.pma = entry[1] == \"true\";\r\n        };\r\n\r\n        let regionFields: Map<Function> = {};\r\n        regionFields[\"xy\"] = () => { // Deprecated, use bounds.\r\n            region.x = parseInt(entry[1]);\r\n            region.y = parseInt(entry[2]);\r\n        };\r\n        regionFields[\"size\"] = () => { // Deprecated, use bounds.\r\n            region.width = parseInt(entry[1]);\r\n            region.height = parseInt(entry[2]);\r\n        };\r\n        regionFields[\"bounds\"] = () => {\r\n            region.x = parseInt(entry[1]);\r\n            region.y = parseInt(entry[2]);\r\n            region.width = parseInt(entry[3]);\r\n            region.height = parseInt(entry[4]);\r\n        };\r\n        regionFields[\"offset\"] = () => { // Deprecated, use offsets.\r\n            region.offsetX = parseInt(entry[1]);\r\n            region.offsetY = parseInt(entry[2]);\r\n        };\r\n        regionFields[\"orig\"] = () => { // Deprecated, use offsets.\r\n            region.originalWidth = parseInt(entry[1]);\r\n            region.originalHeight = parseInt(entry[2]);\r\n        };\r\n        regionFields[\"offsets\"] = () => {\r\n            region.offsetX = parseInt(entry[1]);\r\n            region.offsetY = parseInt(entry[2]);\r\n            region.originalWidth = parseInt(entry[3]);\r\n            region.originalHeight = parseInt(entry[4]);\r\n        };\r\n        regionFields[\"rotate\"] = () => {\r\n            let rotateValue = entry[1];\r\n            let rotate = 0;\r\n            if (rotateValue.toLocaleLowerCase() == \"true\") {\r\n                rotate = 6;\r\n            } else if (rotateValue.toLocaleLowerCase() == \"false\") {\r\n                rotate = 0;\r\n            } else {\r\n                rotate = ((720 - parseFloat(rotateValue)) % 360) / 45;\r\n            }\r\n            region.rotate = rotate;\r\n        };\r\n        regionFields[\"index\"] = () => {\r\n            region.index = parseInt(entry[1]);\r\n        };\r\n\r\n        let line = reader.readLine();\r\n        // Ignore empty lines before first entry.\r\n        while (line != null && line.trim().length == 0)\r\n            line = reader.readLine();\r\n        // Header entries.\r\n        while (true) {\r\n            if (line == null || line.trim().length == 0) break;\r\n            if (reader.readEntry(entry, line) == 0) break; // Silently ignore all header fields.\r\n            line = reader.readLine();\r\n        }\r\n\r\n        let iterateParser = () => {\r\n            while (true) {\r\n                if (line == null) {\r\n                    return callback && callback(this);\r\n                }\r\n                if (line.trim().length == 0) {\r\n                    page = null;\r\n                    line = reader.readLine();\r\n                } else if (page === null) {\r\n                    page = new TextureAtlasPage();\r\n                    page.name = line.trim();\r\n\r\n                    while (true) {\r\n                        if (reader.readEntry(entry, line = reader.readLine()) == 0) break;\r\n                        let field: Function = pageFields[entry[0]];\r\n                        if (field) field();\r\n                    }\r\n                    this.pages.push(page);\r\n\r\n                    textureLoader(page.name, (texture: BaseTexture) => {\r\n                        if (texture === null) {\r\n                            this.pages.splice(this.pages.indexOf(page), 1);\r\n                            return callback && callback(null);\r\n                        }\r\n                        page.baseTexture = texture;\r\n                        //TODO: set scaleMode and mipmapMode from spine\r\n                        if (page.pma) {\r\n                            texture.alphaMode = ALPHA_MODES.PMA;\r\n                        }\r\n                        if (!texture.valid) {\r\n                            texture.setSize(page.width, page.height);\r\n                        }\r\n                        this.pages.push(page);\r\n                        page.setFilters();\r\n\r\n                        if (!page.width || !page.height) {\r\n                            page.width = texture.realWidth;\r\n                            page.height = texture.realHeight;\r\n                            if (!page.width || !page.height) {\r\n                                console.log(\"ERROR spine atlas page \" + page.name + \": meshes wont work if you dont specify size in atlas (http://www.html5gamedevs.com/topic/18888-pixi-spines-and-meshes/?p=107121)\");\r\n                            }\r\n                        }\r\n                        iterateParser();\r\n                    });\r\n                    this.pages.push(page);\r\n                    break;\r\n                } else {\r\n                    region = new RegionFields();\r\n                    let atlasRegion = new TextureAtlasRegion();\r\n                    atlasRegion.name = line;\r\n                    atlasRegion.page = page;\r\n                    let names: string[] = null;\r\n                    let values: number[][] = null;\r\n                    while (true) {\r\n                        let count = reader.readEntry(entry, line = reader.readLine());\r\n                        if (count == 0) break;\r\n                        let field: Function = regionFields[entry[0]];\r\n                        if (field)\r\n                            field();\r\n                        else {\r\n                            if (names == null) {\r\n                                names = [];\r\n                                values = []\r\n                            }\r\n                            names.push(entry[0]);\r\n                            let entryValues: number[] = [];\r\n                            for (let i = 0; i < count; i++)\r\n                                entryValues.push(parseInt(entry[i + 1]));\r\n                            values.push(entryValues);\r\n                        }\r\n                    }\r\n                    if (region.originalWidth == 0 && region.originalHeight == 0) {\r\n                        region.originalWidth = region.width;\r\n                        region.originalHeight = region.height;\r\n                    }\r\n\r\n                    let resolution = page.baseTexture.resolution;\r\n                    region.x /= resolution;\r\n                    region.y /= resolution;\r\n                    region.width /= resolution;\r\n                    region.height /= resolution;\r\n                    region.originalWidth /= resolution;\r\n                    region.originalHeight /= resolution;\r\n                    region.offsetX /= resolution;\r\n                    region.offsetY /= resolution;\r\n\r\n                    const swapWH = region.rotate % 4 !== 0;\r\n                    let frame = new Rectangle(region.x, region.y, swapWH ? region.height : region.width, swapWH ? region.width : region.height);\r\n\r\n                    let orig = new Rectangle(0, 0, region.originalWidth, region.originalHeight);\r\n                    let trim = new Rectangle(region.offsetX, region.originalHeight - region.height - region.offsetY, region.width, region.height);\r\n\r\n                    atlasRegion.texture = new Texture(atlasRegion.page.baseTexture, frame, orig, trim, region.rotate);\r\n                    atlasRegion.index = region.index;\r\n                    atlasRegion.texture.updateUvs();\r\n\r\n                    this.regions.push(atlasRegion);\r\n                }\r\n            }\r\n        };\r\n\r\n        iterateParser();\r\n    }\r\n\r\n    findRegion(name: string): TextureAtlasRegion {\r\n        for (let i = 0; i < this.regions.length; i++) {\r\n            if (this.regions[i].name == name) {\r\n                return this.regions[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    dispose() {\r\n        for (let i = 0; i < this.pages.length; i++) {\r\n            this.pages[i].baseTexture.dispose();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nclass TextureAtlasReader {\r\n    lines: Array<string>;\r\n    index: number = 0;\r\n\r\n    constructor(text: string) {\r\n        this.lines = text.split(/\\r\\n|\\r|\\n/);\r\n    }\r\n\r\n    readLine(): string {\r\n        if (this.index >= this.lines.length)\r\n            return null;\r\n        return this.lines[this.index++];\r\n    }\r\n\r\n    readEntry (entry: string[], line: string): number {\r\n        if (line == null) return 0;\r\n        line = line.trim();\r\n        if (line.length == 0) return 0;\r\n\r\n        let colon = line.indexOf(':');\r\n        if (colon == -1) return 0;\r\n        entry[0] = line.substr(0, colon).trim();\r\n        for (let i = 1, lastMatch = colon + 1;; i++) {\r\n            let comma = line.indexOf(',', lastMatch);\r\n            if (comma == -1) {\r\n                entry[i] = line.substr(lastMatch).trim();\r\n                return i;\r\n            }\r\n            entry[i] = line.substr(lastMatch, comma - lastMatch).trim();\r\n            lastMatch = comma + 1;\r\n            if (i == 4) return 4;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class TextureAtlasPage {\r\n    name: string;\r\n    minFilter: TextureFilter = TextureFilter.Nearest;\r\n    magFilter: TextureFilter = TextureFilter.Nearest;\r\n    uWrap: TextureWrap = TextureWrap.ClampToEdge;\r\n    vWrap: TextureWrap = TextureWrap.ClampToEdge;\r\n    baseTexture: BaseTexture;\r\n    width: number;\r\n    height: number;\r\n    pma: boolean;\r\n\r\n    public setFilters() {\r\n        let tex = this.baseTexture;\r\n        let filter = this.minFilter;\r\n        if (filter == TextureFilter.Linear) {\r\n            tex.scaleMode = SCALE_MODES.LINEAR;\r\n        } else if (this.minFilter == TextureFilter.Nearest) {\r\n            tex.scaleMode = SCALE_MODES.NEAREST;\r\n        } else {\r\n            tex.mipmap = MIPMAP_MODES.POW2;\r\n            if (filter == TextureFilter.MipMapNearestNearest) {\r\n                tex.scaleMode = SCALE_MODES.NEAREST;\r\n            } else {\r\n                tex.scaleMode = SCALE_MODES.LINEAR;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class TextureAtlasRegion extends TextureRegion {\r\n    page: TextureAtlasPage;\r\n    name: string;\r\n    index: number;\r\n}\r\n","import {ISkeleton} from \"./ISkeleton\";\n\n\nlet fround_polyfill = (function(array) {\n    return function(x: number) {\n        return array[0] = x, array[0];\n    };\n})(new Float32Array(1));\n\nlet fround: (value: number) => number =\n    (Math as any).fround || fround_polyfill;\n/**\n * @public\n */\nexport interface Map<T> {\n    [key: string]: T;\n}\n\n/**\n * @public\n */\nexport class IntSet {\n    array = new Array<number>();\n\n    add (value: number): boolean {\n        let contains = this.contains(value);\n        this.array[value | 0] = value | 0;\n        return !contains;\n    }\n\n    contains (value: number) {\n        return this.array[value | 0] != undefined;\n    }\n\n    remove (value: number) {\n        this.array[value | 0] = undefined;\n    }\n\n    clear () {\n        this.array.length = 0;\n    }\n}\n\n/**\n * @public\n */\nexport class StringSet {\n    entries: Map<boolean> = {};\n    size = 0;\n\n    add (value: string): boolean {\n        let contains = this.entries[value];\n        this.entries[value] = true;\n        if (!contains) {\n            this.size++;\n            return true;\n        }\n        return false;\n    }\n\n    addAll (values: string[]): boolean {\n        let oldSize = this.size;\n        for (var i = 0, n = values.length; i < n; i++)\n            this.add(values[i]);\n        return oldSize != this.size;\n    }\n\n    contains (value: string) {\n        return this.entries[value];\n    }\n\n    clear () {\n        this.entries = {};\n        this.size = 0;\n    }\n}\n\n/**\n * @public\n */\nexport interface Disposable {\n    dispose (): void;\n}\n\n/**\n * @public\n */\nexport interface Restorable {\n    restore (): void;\n}\n\n/**\n * @public\n */\nexport class Color {\n    public static WHITE = new Color(1, 1, 1, 1);\n    public static RED = new Color(1, 0, 0, 1);\n    public static GREEN = new Color(0, 1, 0, 1);\n    public static BLUE = new Color(0, 0, 1, 1);\n    public static MAGENTA = new Color(1, 0, 1, 1);\n\n    constructor (public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 0) {\n    }\n\n    set (r: number, g: number, b: number, a: number) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n        return this.clamp();\n    }\n\n    setFromColor (c: Color) {\n        this.r = c.r;\n        this.g = c.g;\n        this.b = c.b;\n        this.a = c.a;\n        return this;\n    }\n\n    setFromString (hex: string) {\n        hex = hex.charAt(0) == '#' ? hex.substr(1) : hex;\n        this.r = parseInt(hex.substr(0, 2), 16) / 255;\n        this.g = parseInt(hex.substr(2, 2), 16) / 255;\n        this.b = parseInt(hex.substr(4, 2), 16) / 255;\n        this.a = hex.length != 8 ? 1 : parseInt(hex.substr(6, 2), 16) / 255;\n        return this;\n    }\n\n    add (r: number, g: number, b: number, a: number) {\n        this.r += r;\n        this.g += g;\n        this.b += b;\n        this.a += a;\n        return this.clamp();\n    }\n\n    clamp () {\n        if (this.r < 0) this.r = 0;\n        else if (this.r > 1) this.r = 1;\n\n        if (this.g < 0) this.g = 0;\n        else if (this.g > 1) this.g = 1;\n\n        if (this.b < 0) this.b = 0;\n        else if (this.b > 1) this.b = 1;\n\n        if (this.a < 0) this.a = 0;\n        else if (this.a > 1) this.a = 1;\n        return this;\n    }\n\n    static rgba8888ToColor(color: Color, value: number) {\n        color.r = ((value & 0xff000000) >>> 24) / 255;\n        color.g = ((value & 0x00ff0000) >>> 16) / 255;\n        color.b = ((value & 0x0000ff00) >>> 8) / 255;\n        color.a = ((value & 0x000000ff)) / 255;\n    }\n\n    static rgb888ToColor (color: Color, value: number) {\n        color.r = ((value & 0x00ff0000) >>> 16) / 255;\n        color.g = ((value & 0x0000ff00) >>> 8) / 255;\n        color.b = ((value & 0x000000ff)) / 255;\n    }\n\n    static fromString (hex : string) : Color {\n        return new Color().setFromString(hex);\n    }\n}\n\n/**\n * @public\n */\nexport class MathUtils {\n    static PI = 3.1415927;\n    static PI2 = MathUtils.PI * 2;\n    static radiansToDegrees = 180 / MathUtils.PI;\n    static radDeg = MathUtils.radiansToDegrees;\n    static degreesToRadians = MathUtils.PI / 180;\n    static degRad = MathUtils.degreesToRadians;\n\n    static clamp (value: number, min: number, max: number) {\n        if (value < min) return min;\n        if (value > max) return max;\n        return value;\n    }\n\n    static cosDeg (degrees: number) {\n        return Math.cos(degrees * MathUtils.degRad);\n    }\n\n    static sinDeg (degrees: number) {\n        return Math.sin(degrees * MathUtils.degRad);\n    }\n\n    static signum (value: number): number {\n        return value > 0 ? 1 : value < 0 ? -1 : 0;\n    }\n\n    static toInt (x: number) {\n        return x > 0 ? Math.floor(x) : Math.ceil(x);\n    }\n\n    static cbrt (x: number) {\n        let y = Math.pow(Math.abs(x), 1/3);\n        return x < 0 ? -y : y;\n    }\n\n    static randomTriangular (min: number, max: number): number {\n        return MathUtils.randomTriangularWith(min, max, (min + max) * 0.5);\n    }\n\n    static randomTriangularWith (min: number, max: number, mode: number): number {\n        let u = Math.random();\n        let d = max - min;\n        if (u <= (mode - min) / d) return min + Math.sqrt(u * d * (mode - min));\n        return max - Math.sqrt((1 - u) * d * (max - mode));\n    }\n}\n\n/**\n * @public\n */\nexport abstract class Interpolation {\n    protected abstract applyInternal (a: number): number;\n    apply(start: number, end: number, a: number): number {\n        return start + (end - start) * this.applyInternal(a);\n    }\n}\n\n/**\n * @public\n */\nexport class Pow extends Interpolation {\n    protected power = 2;\n\n    constructor (power: number) {\n        super();\n        this.power = power;\n    }\n\n    applyInternal (a: number): number {\n        if (a <= 0.5) return Math.pow(a * 2, this.power) / 2;\n        return Math.pow((a - 1) * 2, this.power) / (this.power % 2 == 0 ? -2 : 2) + 1;\n    }\n}\n\n/**\n * @public\n */\nexport class PowOut extends Pow {\n    constructor (power: number) {\n        super(power);\n    }\n\n    applyInternal (a: number) : number {\n        return Math.pow(a - 1, this.power) * (this.power % 2 == 0 ? -1 : 1) + 1;\n    }\n}\n\n/**\n * @public\n */\nexport class Utils {\n    static SUPPORTS_TYPED_ARRAYS = typeof(Float32Array) !== \"undefined\";\n\n    static arrayCopy<T> (source: ArrayLike<T>, sourceStart: number, dest: ArrayLike<T>, destStart: number, numElements: number) {\n        for (let i = sourceStart, j = destStart; i < sourceStart + numElements; i++, j++) {\n            dest[j] = source[i];\n        }\n    }\n\n    static arrayFill<T> (array: ArrayLike<T>, fromIndex: number, toIndex: number, value: T) {\n        for (let i = fromIndex; i < toIndex; i++)\n            array[i] = value;\n    }\n\n    static setArraySize<T> (array: Array<T>, size: number, value: any = 0): Array<T> {\n        let oldSize = array.length;\n        if (oldSize == size) return array;\n        array.length = size;\n        if (oldSize < size) {\n            for (let i = oldSize; i < size; i++) array[i] = value;\n        }\n        return array;\n    }\n\n    static ensureArrayCapacity<T> (array: Array<T>, size: number, value: any = 0): Array<T> {\n        if (array.length >= size) return array;\n        return Utils.setArraySize(array, size, value);\n    }\n\n    static newArray<T> (size: number, defaultValue: T): Array<T> {\n        let array = new Array<T>(size);\n        for (let i = 0; i < size; i++) array[i] = defaultValue;\n        return array;\n    }\n\n    static newFloatArray (size: number): ArrayLike<number> {\n        if (Utils.SUPPORTS_TYPED_ARRAYS)\n            return new Float32Array(size)\n        else {\n            let array = new Array<number>(size);\n            for (let i = 0; i < array.length; i++) array[i] = 0;\n            return array;\n        }\n    }\n\n    static newShortArray (size: number): ArrayLike<number> {\n        if (Utils.SUPPORTS_TYPED_ARRAYS)\n            return new Int16Array(size)\n        else {\n            let array = new Array<number>(size);\n            for (let i = 0; i < array.length; i++) array[i] = 0;\n            return array;\n        }\n    }\n\n    static toFloatArray (array: Array<number>) {\n        return Utils.SUPPORTS_TYPED_ARRAYS ? new Float32Array(array) : array;\n    }\n\n    static toSinglePrecision (value: number) {\n        return Utils.SUPPORTS_TYPED_ARRAYS ? fround(value) : value;\n    }\n\n    // This function is used to fix WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n    static webkit602BugfixHelper (alpha: number, blend: any) {\n\n    }\n\n    static contains<T> (array: Array<T>, element: T, identity = true) {\n        for (let i = 0; i < array.length; i++)\n            if (array[i] == element) return true;\n        return false;\n    }\n\n    static enumValue (type: any, name: string) {\n        return type[name[0].toUpperCase() + name.slice(1)];\n    }\n}\n\n/**\n * @public\n */\nexport class DebugUtils {\n    static logBones(skeleton: ISkeleton) {\n        for (let i = 0; i < skeleton.bones.length; i++) {\n            let bone = skeleton.bones[i];\n            let mat = bone.matrix;\n            console.log(bone.data.name + \", \" + mat.a + \", \" + mat.b + \", \" + mat.c + \", \" + mat.d + \", \" + mat.tx + \", \" + mat.ty);\n        }\n    }\n}\n\n/**\n * @public\n */\nexport class Pool<T> {\n    private items = new Array<T>();\n    private instantiator: () => T;\n\n    constructor (instantiator: () => T) {\n        this.instantiator = instantiator;\n    }\n\n    obtain () {\n        return this.items.length > 0 ? this.items.pop() : this.instantiator();\n    }\n\n    free (item: T) {\n        if ((item as any).reset) (item as any).reset();\n        this.items.push(item);\n    }\n\n    freeAll (items: ArrayLike<T>) {\n        for (let i = 0; i < items.length; i++)\n            this.free(items[i]);\n    }\n\n    clear () {\n        this.items.length = 0;\n    }\n}\n\n/**\n * @public\n */\nexport class Vector2 {\n    constructor (public x = 0, public y = 0) {\n    }\n\n    set (x: number, y: number): Vector2 {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n\n    length () {\n        let x = this.x;\n        let y = this.y;\n        return Math.sqrt(x * x + y * y);\n    }\n\n    normalize () {\n        let len = this.length();\n        if (len != 0) {\n            this.x /= len;\n            this.y /= len;\n        }\n        return this;\n    }\n}\n\n/**\n * @public\n */\nexport class TimeKeeper {\n    maxDelta = 0.064;\n    framesPerSecond = 0;\n    delta = 0;\n    totalTime = 0;\n\n    private lastTime = Date.now() / 1000;\n    private frameCount = 0;\n    private frameTime = 0;\n\n    update () {\n        let now = Date.now() / 1000;\n        this.delta = now - this.lastTime;\n        this.frameTime += this.delta;\n        this.totalTime += this.delta;\n        if (this.delta > this.maxDelta) this.delta = this.maxDelta;\n        this.lastTime = now;\n\n        this.frameCount++;\n        if (this.frameTime > 1) {\n            this.framesPerSecond = this.frameCount / this.frameTime;\n            this.frameTime = 0;\n            this.frameCount = 0;\n        }\n    }\n}\n\n/**\n * @public\n */\nexport interface ArrayLike<T> {\n    length: number;\n    [n: number]: T;\n}\n\n/**\n * @public\n */\nexport class WindowedMean {\n    values: Array<number>;\n    addedValues = 0;\n    lastValue = 0;\n    mean = 0;\n    dirty = true;\n\n    constructor (windowSize: number = 32) {\n        this.values = new Array<number>(windowSize);\n    }\n\n    hasEnoughData () {\n        return this.addedValues >= this.values.length;\n    }\n\n    addValue (value: number) {\n        if (this.addedValues < this.values.length) this.addedValues++;\n        this.values[this.lastValue++] = value;\n        if (this.lastValue > this.values.length - 1) this.lastValue = 0;\n        this.dirty = true;\n    }\n\n    getMean () {\n        if (this.hasEnoughData()) {\n            if (this.dirty) {\n                let mean = 0;\n                for (let i = 0; i < this.values.length; i++)\n                    mean += this.values[i];\n                this.mean = mean / this.values.length;\n                this.dirty = false;\n            }\n            return this.mean;\n        }\n        return 0;\n    }\n}\n","/**\r\n * @public\r\n */\r\nexport let settings = {\r\n    yDown: true,\r\n    /**\r\n     * pixi-spine gives option to not fail at certain parsing errors\r\n     * spine-ts fails here\r\n     */\r\n    FAIL_ON_NON_EXISTING_SKIN: false,\r\n\r\n    /**\r\n     * past Spine.globalAutoUpdate\r\n     */\r\n    GLOBAL_AUTO_UPDATE: true,\r\n\r\n    /**\r\n     * past Spine.globalDelayLimit\r\n     */\r\n    GLOBAL_DELAY_LIMIT: 0,\r\n}\r\n","import {AttachmentType} from './core/AttachmentType';\r\nimport {TextureRegion} from './core/TextureRegion';\r\nimport {TextureAtlasRegion} from './core/TextureAtlas';\r\nimport {MathUtils} from './core/Utils';\r\nimport type {\r\n    IAnimationState,\r\n    IAnimationStateData,\r\n    IAttachment, IClippingAttachment, IMeshAttachment,\r\n    IRegionAttachment,\r\n    ISkeleton,\r\n    ISkeletonData,\r\n    ISlot,\r\n    IVertexAttachment\r\n} from './core/ISkeleton';\r\n\r\nimport {DRAW_MODES} from '@pixi/constants';\r\nimport {Container, DisplayObject} from '@pixi/display';\r\nimport {Sprite} from '@pixi/sprite';\r\nimport {SimpleMesh} from '@pixi/mesh-extras';\r\nimport {Graphics} from '@pixi/graphics'\r\nimport {Rectangle, Polygon, Transform} from '@pixi/math';\r\nimport {hex2rgb, rgb2hex} from '@pixi/utils';\r\nimport type {Texture} from '@pixi/core';\r\nimport {settings} from \"./settings\";\r\n\r\nlet tempRgb = [0, 0, 0];\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ISpineDisplayObject extends DisplayObject {\r\n    region?: TextureRegion;\r\n    attachment?: IAttachment;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class SpineSprite extends Sprite implements ISpineDisplayObject {\r\n    region?: TextureRegion = null;\r\n    attachment?: IAttachment = null;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class SpineMesh extends SimpleMesh implements ISpineDisplayObject {\r\n    region?: TextureRegion = null;\r\n    attachment?: IAttachment = null;\r\n\r\n    constructor(texture: Texture, vertices?: Float32Array, uvs?: Float32Array, indices?: Uint16Array, drawMode?: number) {\r\n        super(texture, vertices, uvs, indices, drawMode);\r\n    }\r\n}\r\n\r\n/**\r\n * A class that enables the you to import and run your spine animations in pixi.\r\n * The Spine animation data needs to be loaded using either the Loader or a SpineLoader before it can be used by this class\r\n * See example 12 (http://www.goodboydigital.com/pixijs/examples/12/) to see a working example and check out the source\r\n *\r\n * ```js\r\n * let spineAnimation = new spine(spineData);\r\n * ```\r\n *\r\n * @public\r\n * @class\r\n * @extends Container\r\n * @memberof spine\r\n * @param spineData {object} The spine data loaded from a spine atlas.\r\n */\r\nexport abstract class SpineBase<Skeleton extends ISkeleton,\r\n    SkeletonData extends ISkeletonData,\r\n    AnimationState extends IAnimationState,\r\n    AnimationStateData extends IAnimationStateData>\r\n    extends Container implements GlobalMixins.Spine {\r\n\r\n    tintRgb: ArrayLike<number>;\r\n    spineData: SkeletonData;\r\n    skeleton: Skeleton;\r\n    stateData: AnimationStateData;\r\n    state: AnimationState;\r\n    slotContainers: Array<Container>;\r\n    tempClipContainers: Array<Container>;\r\n    localDelayLimit: number;\r\n    private _autoUpdate: boolean;\r\n    protected _visible: boolean;\r\n\r\n    abstract createSkeleton(spineData: ISkeletonData);\r\n\r\n    constructor(spineData: SkeletonData) {\r\n        super();\r\n\r\n        if (!spineData) {\r\n            throw new Error('The spineData param is required.');\r\n        }\r\n\r\n        if ((typeof spineData) === \"string\") {\r\n            throw new Error('spineData param cant be string. Please use spine.Spine.fromAtlas(\"YOUR_RESOURCE_NAME\") from now on.');\r\n        }\r\n\r\n        /**\r\n         * The spineData object\r\n         *\r\n         * @member {object}\r\n         */\r\n        this.spineData = spineData;\r\n\r\n        /**\r\n         * A spine Skeleton object\r\n         *\r\n         * @member {object}\r\n         */\r\n        this.createSkeleton(spineData);\r\n\r\n        /**\r\n         * An array of containers\r\n         *\r\n         * @member {Container[]}\r\n         */\r\n        this.slotContainers = [];\r\n\r\n        this.tempClipContainers = [];\r\n\r\n        for (let i = 0, n = this.skeleton.slots.length; i < n; i++) {\r\n            let slot = this.skeleton.slots[i];\r\n            let attachment: any = slot.getAttachment();\r\n            let slotContainer = this.newContainer();\r\n            this.slotContainers.push(slotContainer);\r\n            this.addChild(slotContainer);\r\n            this.tempClipContainers.push(null);\r\n\r\n            if (!attachment) {\r\n                continue;\r\n            }\r\n            if (attachment.type === AttachmentType.Region) {\r\n                let spriteName = (attachment.region as TextureAtlasRegion).name;\r\n                let sprite = this.createSprite(slot, attachment as IRegionAttachment, spriteName);\r\n                slot.currentSprite = sprite;\r\n                slot.currentSpriteName = spriteName;\r\n                slotContainer.addChild(sprite);\r\n            } else if (attachment.type === AttachmentType.Mesh) {\r\n                let mesh = this.createMesh(slot, attachment);\r\n                slot.currentMesh = mesh;\r\n                slot.currentMeshId = attachment.id;\r\n                slot.currentMeshName = attachment.name;\r\n                slotContainer.addChild(mesh);\r\n            } else if (attachment.type === AttachmentType.Clipping) {\r\n                this.createGraphics(slot, attachment);\r\n                slotContainer.addChild(slot.clippingContainer);\r\n                slotContainer.addChild(slot.currentGraphics);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The tint applied to all spine slots. This is a [r,g,b] value. A value of [1,1,1] will remove any tint effect.\r\n         *\r\n         * @member {number}\r\n         * @memberof spine.Spine#\r\n         */\r\n        this.tintRgb = new Float32Array([1, 1, 1]);\r\n\r\n        this.autoUpdate = true;\r\n        this.visible = true;\r\n    }\r\n\r\n    /**\r\n     * If this flag is set to true, the spine animation will be automatically updated every\r\n     * time the object id drawn. The down side of this approach is that the delta time is\r\n     * automatically calculated and you could miss out on cool effects like slow motion,\r\n     * pause, skip ahead and the sorts. Most of these effects can be achieved even with\r\n     * autoUpdate enabled but are harder to achieve.\r\n     *\r\n     * @member {boolean}\r\n     * @memberof spine.Spine#\r\n     * @default true\r\n     */\r\n    get autoUpdate(): boolean {\r\n        return this._autoUpdate;\r\n    }\r\n\r\n    set autoUpdate(value: boolean) {\r\n        if (value !== this._autoUpdate) {\r\n            this._autoUpdate = value;\r\n            this.updateTransform = value ? SpineBase.prototype.autoUpdateTransform : Container.prototype.updateTransform;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The tint applied to the spine object. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\r\n     *\r\n     * @member {number}\r\n     * @memberof spine.Spine#\r\n     * @default 0xFFFFFF\r\n     */\r\n    get tint(): number {\r\n        return rgb2hex(this.tintRgb as any);\r\n    }\r\n\r\n    set tint(value: number) {\r\n        this.tintRgb = hex2rgb(value, this.tintRgb as any);\r\n    }\r\n\r\n    /**\r\n     * Limit value for the update dt with Spine.globalDelayLimit\r\n     * that can be overridden with localDelayLimit\r\n     * @return {number} - Maximum processed dt value for the update\r\n     */\r\n    get delayLimit(): number {\r\n        let limit = typeof this.localDelayLimit !== \"undefined\" ?\r\n            this.localDelayLimit : settings.GLOBAL_DELAY_LIMIT;\r\n\r\n        // If limit is 0, this means there is no limit for the delay\r\n        return limit || Number.MAX_VALUE\r\n    }\r\n\r\n    /**\r\n     * Update the spine skeleton and its animations by delta time (dt)\r\n     *\r\n     * @param dt {number} Delta time. Time by which the animation should be updated\r\n     */\r\n    update(dt: number) {\r\n        // Limit delta value to avoid animation jumps\r\n        let delayLimit = this.delayLimit;\r\n        if (dt > delayLimit) dt = delayLimit;\r\n\r\n        this.state.update(dt);\r\n        this.state.apply(this.skeleton);\r\n\r\n        //check we haven't been destroyed via a spine event callback in state update\r\n        if (!this.skeleton)\r\n            return;\r\n\r\n        this.skeleton.updateWorldTransform();\r\n\r\n        let slots = this.skeleton.slots;\r\n\r\n        // in case pixi has double tint\r\n        let globalClr = (this as any).color;\r\n        let light: ArrayLike<number> = null, dark: ArrayLike<number> = null;\r\n\r\n        if (globalClr) {\r\n            light = globalClr.light;\r\n            dark = globalClr.dark;\r\n        } else {\r\n            light = this.tintRgb;\r\n        }\r\n\r\n        // let thack = false;\r\n\r\n        for (let i = 0, n = slots.length; i < n; i++) {\r\n            let slot = slots[i];\r\n            let attachment = slot.getAttachment();\r\n            let slotContainer = this.slotContainers[i];\r\n\r\n            if (!attachment) {\r\n                slotContainer.visible = false;\r\n                continue;\r\n            }\r\n\r\n            let spriteColor: any = null;\r\n\r\n            let attColor = (attachment as any).color;\r\n            switch (attachment.type) {\r\n                case AttachmentType.Region:\r\n                    let region = (attachment as IRegionAttachment).region;\r\n                    if (region) {\r\n                        if (slot.currentMesh) {\r\n                            slot.currentMesh.visible = false;\r\n                            slot.currentMesh = null;\r\n                            slot.currentMeshId = undefined;\r\n                            slot.currentMeshName = undefined;\r\n                        }\r\n                        let ar = region as TextureAtlasRegion;\r\n                        if (!slot.currentSpriteName || slot.currentSpriteName !== ar.name) {\r\n                            let spriteName = ar.name;\r\n                            if (slot.currentSprite) {\r\n                                slot.currentSprite.visible = false;\r\n                            }\r\n                            slot.sprites = slot.sprites || {};\r\n                            if (slot.sprites[spriteName] !== undefined) {\r\n                                slot.sprites[spriteName].visible = true;\r\n                            } else {\r\n                                let sprite = this.createSprite(slot, attachment as IRegionAttachment, spriteName);\r\n                                slotContainer.addChild(sprite);\r\n                            }\r\n                            slot.currentSprite = slot.sprites[spriteName];\r\n                            slot.currentSpriteName = spriteName;\r\n\r\n                            // force sprite update when attachment name is same.\r\n                            // issues https://github.com/pixijs/pixi-spine/issues/318\r\n                        } else if (slot.currentSpriteName === ar.name && !slot.hackRegion) {\r\n                            this.setSpriteRegion(attachment as IRegionAttachment, slot.currentSprite, region);\r\n                        }\r\n                    }\r\n\r\n                    let transform = slotContainer.transform;\r\n                    transform.setFromMatrix(slot.bone.matrix);\r\n\r\n                    if (slot.currentSprite.color) {\r\n                        //YAY! double - tint!\r\n                        spriteColor = slot.currentSprite.color;\r\n                    } else {\r\n                        tempRgb[0] = light[0] * slot.color.r * attColor.r;\r\n                        tempRgb[1] = light[1] * slot.color.g * attColor.g;\r\n                        tempRgb[2] = light[2] * slot.color.b * attColor.b;\r\n                        slot.currentSprite.tint = rgb2hex(tempRgb);\r\n                    }\r\n                    slot.currentSprite.blendMode = slot.blendMode;\r\n                    break;\r\n\r\n                case AttachmentType.Mesh:\r\n                    if (slot.currentSprite) {\r\n                        //TODO: refactor this thing, switch it on and off for container\r\n                        slot.currentSprite.visible = false;\r\n                        slot.currentSprite = null;\r\n                        slot.currentSpriteName = undefined;\r\n\r\n                        //TODO: refactor this shit\r\n                        const transform = new Transform();\r\n                        (transform as any)._parentID = -1;\r\n                        (transform as any)._worldID = (slotContainer.transform as any)._worldID;\r\n                        slotContainer.transform = transform;\r\n                    }\r\n                    const id = (attachment as IVertexAttachment).id;\r\n                    if (!slot.currentMeshId || slot.currentMeshId !== id) {\r\n                        let meshId = id;\r\n                        if (slot.currentMesh) {\r\n                            slot.currentMesh.visible = false;\r\n                        }\r\n\r\n                        slot.meshes = slot.meshes || {};\r\n\r\n                        if (slot.meshes[meshId] !== undefined) {\r\n                            slot.meshes[meshId].visible = true;\r\n                        } else {\r\n                            let mesh = this.createMesh(slot, attachment as IMeshAttachment);\r\n                            slotContainer.addChild(mesh);\r\n                        }\r\n\r\n                        slot.currentMesh = slot.meshes[meshId];\r\n                        slot.currentMeshName = attachment.name;\r\n                        slot.currentMeshId = meshId;\r\n                    }\r\n                    (attachment as IVertexAttachment).computeWorldVerticesOld(slot, slot.currentMesh.vertices);\r\n                    if (slot.currentMesh.color) {\r\n                        // pixi-heaven\r\n                        spriteColor = slot.currentMesh.color;\r\n                    } else {\r\n                        tempRgb[0] = light[0] * slot.color.r * attColor.r;\r\n                        tempRgb[1] = light[1] * slot.color.g * attColor.g;\r\n                        tempRgb[2] = light[2] * slot.color.b * attColor.b;\r\n                        slot.currentMesh.tint = rgb2hex(tempRgb);\r\n                    }\r\n                    slot.currentMesh.blendMode = slot.blendMode;\r\n                    break;\r\n                case AttachmentType.Clipping:\r\n                    if (!slot.currentGraphics) {\r\n                        this.createGraphics(slot, attachment as IClippingAttachment);\r\n                        slotContainer.addChild(slot.clippingContainer);\r\n                        slotContainer.addChild(slot.currentGraphics);\r\n                    }\r\n                    this.updateGraphics(slot, attachment as IClippingAttachment);\r\n                    slotContainer.alpha = 1.0;\r\n                    slotContainer.visible = true;\r\n                    continue;\r\n                default:\r\n                    slotContainer.visible = false;\r\n                    continue;\r\n            }\r\n            slotContainer.visible = true;\r\n\r\n            // pixi has double tint\r\n            if (spriteColor) {\r\n                let r0 = slot.color.r * attColor.r;\r\n                let g0 = slot.color.g * attColor.g;\r\n                let b0 = slot.color.b * attColor.b;\r\n\r\n                //YAY! double-tint!\r\n                spriteColor.setLight(\r\n                    light[0] * r0 + dark[0] * (1.0 - r0),\r\n                    light[1] * g0 + dark[1] * (1.0 - g0),\r\n                    light[2] * b0 + dark[2] * (1.0 - b0),\r\n                );\r\n                if (slot.darkColor) {\r\n                    r0 = slot.darkColor.r;\r\n                    g0 = slot.darkColor.g;\r\n                    b0 = slot.darkColor.b;\r\n                } else {\r\n                    r0 = 0.0;\r\n                    g0 = 0.0;\r\n                    b0 = 0.0;\r\n                }\r\n                spriteColor.setDark(\r\n                    light[0] * r0 + dark[0] * (1 - r0),\r\n                    light[1] * g0 + dark[1] * (1 - g0),\r\n                    light[2] * b0 + dark[2] * (1 - b0),\r\n                );\r\n            }\r\n\r\n            slotContainer.alpha = slot.color.a;\r\n        }\r\n\r\n        //== this is clipping implementation ===\r\n        //TODO: remove parent hacks when pixi masks allow it\r\n        let drawOrder = this.skeleton.drawOrder;\r\n        let clippingAttachment: IClippingAttachment = null;\r\n        let clippingContainer: Container = null;\r\n\r\n        for (let i = 0, n = drawOrder.length; i < n; i++) {\r\n            let slot = slots[drawOrder[i].data.index];\r\n            let slotContainer = this.slotContainers[drawOrder[i].data.index];\r\n\r\n            if (!clippingContainer) {\r\n                //Adding null check as it is possible for slotContainer.parent to be null in the event of a spine being disposed off in its loop callback\r\n                if (slotContainer.parent !== null && slotContainer.parent !== this) {\r\n                    slotContainer.parent.removeChild(slotContainer);\r\n                    //silend add hack\r\n                    (slotContainer as any).parent = this;\r\n                }\r\n            }\r\n            if (slot.currentGraphics && slot.getAttachment()) {\r\n                clippingContainer = slot.clippingContainer;\r\n                clippingAttachment = slot.getAttachment() as IClippingAttachment;\r\n                clippingContainer.children.length = 0;\r\n                this.children[i] = slotContainer;\r\n\r\n                if (clippingAttachment.endSlot === slot.data) {\r\n                    clippingAttachment.endSlot = null;\r\n                }\r\n\r\n            } else {\r\n                if (clippingContainer) {\r\n                    let c = this.tempClipContainers[i];\r\n                    if (!c) {\r\n                        c = this.tempClipContainers[i] = this.newContainer();\r\n                        c.visible = false;\r\n                    }\r\n                    this.children[i] = c;\r\n\r\n                    //silent remove hack\r\n                    (slotContainer as any).parent = null;\r\n                    clippingContainer.addChild(slotContainer);\r\n                    if (clippingAttachment.endSlot == slot.data) {\r\n                        clippingContainer.renderable = true;\r\n                        clippingContainer = null;\r\n                        clippingAttachment = null;\r\n                    }\r\n                } else {\r\n                    this.children[i] = slotContainer;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    private setSpriteRegion(attachment: IRegionAttachment, sprite: SpineSprite, region: TextureRegion) {\r\n        // prevent setters calling when attachment and region is same\r\n        if (sprite.attachment === attachment && sprite.region === region) {\r\n            return;\r\n        }\r\n\r\n        sprite.region = region;\r\n        sprite.attachment = attachment;\r\n\r\n        sprite.texture = region.texture;\r\n        sprite.rotation = attachment.rotation * MathUtils.degRad;\r\n        sprite.position.x = attachment.x;\r\n        sprite.position.y = attachment.y;\r\n        sprite.alpha = attachment.color.a;\r\n\r\n        if (!region.size) {\r\n            sprite.scale.x = attachment.scaleX * attachment.width / region.originalWidth;\r\n            sprite.scale.y = -attachment.scaleY * attachment.height / region.originalHeight;\r\n        } else {\r\n            //hacked!\r\n            sprite.scale.x = region.size.width / region.originalWidth;\r\n            sprite.scale.y = -region.size.height / region.originalHeight;\r\n        }\r\n    }\r\n\r\n    private setMeshRegion(attachment: IMeshAttachment, mesh: SpineMesh, region: TextureRegion) {\r\n\r\n        if (mesh.attachment === attachment && mesh.region === region) {\r\n            return;\r\n        }\r\n\r\n        mesh.region = region;\r\n        mesh.attachment = attachment;\r\n        mesh.texture = region.texture;\r\n        region.texture.updateUvs();\r\n        mesh.uvBuffer.update(attachment.regionUVs);\r\n    }\r\n\r\n    protected lastTime: number;\r\n\r\n    /**\r\n     * When autoupdate is set to yes this function is used as pixi's updateTransform function\r\n     *\r\n     * @private\r\n     */\r\n    autoUpdateTransform() {\r\n        if (settings.GLOBAL_AUTO_UPDATE) {\r\n            this.lastTime = this.lastTime || Date.now();\r\n            let timeDelta = (Date.now() - this.lastTime) * 0.001;\r\n            this.lastTime = Date.now();\r\n            this.update(timeDelta);\r\n        } else {\r\n            this.lastTime = 0;\r\n        }\r\n\r\n        Container.prototype.updateTransform.call(this);\r\n    };\r\n\r\n    /**\r\n     * Create a new sprite to be used with core.RegionAttachment\r\n     *\r\n     * @param slot {spine.Slot} The slot to which the attachment is parented\r\n     * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\r\n     * @private\r\n     */\r\n    createSprite(slot: ISlot, attachment: IRegionAttachment, defName: string) {\r\n        let region = attachment.region;\r\n        if (slot.hackAttachment === attachment) {\r\n            region = slot.hackRegion;\r\n        }\r\n        let texture = region.texture;\r\n        let sprite = this.newSprite(texture);\r\n\r\n        sprite.anchor.set(0.5);\r\n        this.setSpriteRegion(attachment, sprite, attachment.region);\r\n\r\n        slot.sprites = slot.sprites || {};\r\n        slot.sprites[defName] = sprite;\r\n        return sprite;\r\n    };\r\n\r\n    /**\r\n     * Creates a Strip from the spine data\r\n     * @param slot {spine.Slot} The slot to which the attachment is parented\r\n     * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\r\n     * @private\r\n     */\r\n    createMesh(slot: ISlot, attachment: IMeshAttachment) {\r\n        let region = attachment.region;\r\n        if (slot.hackAttachment === attachment) {\r\n            region = slot.hackRegion;\r\n            slot.hackAttachment = null;\r\n            slot.hackRegion = null;\r\n        }\r\n        let strip = this.newMesh(\r\n            region.texture,\r\n            new Float32Array(attachment.regionUVs.length),\r\n            attachment.regionUVs,\r\n            new Uint16Array(attachment.triangles),\r\n            DRAW_MODES.TRIANGLES);\r\n\r\n        if (typeof (strip as any)._canvasPadding !== \"undefined\") {\r\n            (strip as any)._canvasPadding = 1.5;\r\n        }\r\n\r\n        strip.alpha = attachment.color.a;\r\n\r\n        strip.region = attachment.region;\r\n        this.setMeshRegion(attachment, strip, region);\r\n\r\n        slot.meshes = slot.meshes || {};\r\n        slot.meshes[attachment.id] = strip;\r\n        return strip;\r\n    };\r\n\r\n    static clippingPolygon: Array<number> = [];\r\n\r\n    //@ts-ignore\r\n    createGraphics(slot: ISlot, clip: IClippingAttachment) {\r\n        let graphics = this.newGraphics();\r\n        let poly = new Polygon([]);\r\n        graphics.clear();\r\n        graphics.beginFill(0xffffff, 1);\r\n        graphics.drawPolygon(poly as any);\r\n        graphics.renderable = false;\r\n        slot.currentGraphics = graphics;\r\n        slot.clippingContainer = this.newContainer();\r\n        slot.clippingContainer.mask = slot.currentGraphics;\r\n\r\n        return graphics;\r\n    }\r\n\r\n    updateGraphics(slot: ISlot, clip: IClippingAttachment) {\r\n        let geom = slot.currentGraphics.geometry;\r\n        let vertices = (geom.graphicsData[0].shape as Polygon).points;\r\n        let n = clip.worldVerticesLength;\r\n        vertices.length = n;\r\n        clip.computeWorldVertices(slot, 0, n, vertices, 0, 2);\r\n        geom.invalidate();\r\n    }\r\n\r\n    /**\r\n     * Changes texture in attachment in specific slot.\r\n     *\r\n     * PIXI runtime feature, it was made to satisfy our users.\r\n     *\r\n     * @param slotIndex {number}\r\n     * @param [texture = null] {PIXI.Texture} If null, take default (original) texture\r\n     * @param [size = null] {PIXI.Point} sometimes we need new size for region attachment, you can pass 'texture.orig' there\r\n     * @returns {boolean} Success flag\r\n     */\r\n    hackTextureBySlotIndex(slotIndex: number, texture: Texture = null, size: Rectangle = null) {\r\n        let slot = this.skeleton.slots[slotIndex];\r\n        if (!slot) {\r\n            return false;\r\n        }\r\n        let attachment: any = slot.getAttachment();\r\n        let region: TextureRegion = attachment.region;\r\n        if (texture) {\r\n            region = new TextureRegion();\r\n            region.texture = texture;\r\n            region.size = size;\r\n            slot.hackRegion = region;\r\n            slot.hackAttachment = attachment;\r\n        } else {\r\n            slot.hackRegion = null;\r\n            slot.hackAttachment = null;\r\n        }\r\n        if (slot.currentSprite && slot.currentSprite.region != region) {\r\n            this.setSpriteRegion(attachment, slot.currentSprite, region);\r\n            slot.currentSprite.region = region;\r\n        } else if (slot.currentMesh && slot.currentMesh.region != region) {\r\n            this.setMeshRegion(attachment, slot.currentMesh, region);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Changes texture in attachment in specific slot.\r\n     *\r\n     * PIXI runtime feature, it was made to satisfy our users.\r\n     *\r\n     * @param slotName {string}\r\n     * @param [texture = null] {PIXI.Texture} If null, take default (original) texture\r\n     * @param [size = null] {PIXI.Point} sometimes we need new size for region attachment, you can pass 'texture.orig' there\r\n     * @returns {boolean} Success flag\r\n     */\r\n    hackTextureBySlotName(slotName: string, texture: Texture = null, size: Rectangle = null) {\r\n        let index = this.skeleton.findSlotIndex(slotName);\r\n        if (index == -1) {\r\n            return false;\r\n        }\r\n        return this.hackTextureBySlotIndex(index, texture, size);\r\n    }\r\n\r\n    /**\r\n     * Changes texture of an attachment\r\n     *\r\n     * PIXI runtime feature, it was made to satisfy our users.\r\n     *\r\n     * @param slotName {string}\r\n     * @param attachmentName {string}\r\n     * @param [texture = null] {PIXI.Texture} If null, take default (original) texture\r\n     * @param [size = null] {PIXI.Point} sometimes we need new size for region attachment, you can pass 'texture.orig' there\r\n     * @returns {boolean} Success flag\r\n     */\r\n    hackTextureAttachment(slotName: string, attachmentName: string, texture, size: Rectangle = null) {\r\n        // changes the texture of an attachment at the skeleton level\r\n        const slotIndex = this.skeleton.findSlotIndex(slotName)\r\n        const attachment: any = this.skeleton.getAttachmentByName(slotName, attachmentName)\r\n        attachment.region.texture = texture\r\n\r\n        const slot = this.skeleton.slots[slotIndex]\r\n        if (!slot) {\r\n            return false\r\n        }\r\n\r\n        // gets the currently active attachment in this slot\r\n        const currentAttachment: any = slot.getAttachment()\r\n        if (attachmentName === currentAttachment.name) {\r\n            // if the attachment we are changing is currently active, change the the live texture\r\n            let region: TextureRegion = attachment.region\r\n            if (texture) {\r\n                region = new TextureRegion()\r\n                region.texture = texture\r\n                region.size = size\r\n                slot.hackRegion = region\r\n                slot.hackAttachment = currentAttachment\r\n            } else {\r\n                slot.hackRegion = null\r\n                slot.hackAttachment = null\r\n            }\r\n            if (slot.currentSprite && slot.currentSprite.region != region) {\r\n                this.setSpriteRegion(currentAttachment, slot.currentSprite, region)\r\n                slot.currentSprite.region = region\r\n            } else if (slot.currentMesh && slot.currentMesh.region != region) {\r\n                this.setMeshRegion(currentAttachment, slot.currentMesh, region)\r\n            }\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    //those methods can be overriden to spawn different classes\r\n    newContainer() {\r\n        return new Container();\r\n    }\r\n\r\n    newSprite(tex: Texture) {\r\n        return new SpineSprite(tex);\r\n    }\r\n\r\n    newGraphics() {\r\n        return new Graphics();\r\n    }\r\n\r\n    newMesh(texture: Texture, vertices?: Float32Array, uvs?: Float32Array, indices?: Uint16Array, drawMode?: number) {\r\n        return new SpineMesh(texture, vertices, uvs, indices, drawMode);\r\n    }\r\n\r\n    transformHack() {\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Hack for pixi-display and pixi-lights. Every attachment name ending with a suffix will be added to different layer\r\n     * @param nameSuffix\r\n     * @param group\r\n     * @param outGroup\r\n     */\r\n    hackAttachmentGroups(nameSuffix: string, group: any, outGroup: any) {\r\n        if (!nameSuffix) {\r\n            return undefined;\r\n        }\r\n        const list_d = [], list_n = [];\r\n        for (let i = 0, len = this.skeleton.slots.length; i < len; i++) {\r\n            const slot = this.skeleton.slots[i];\r\n            const name = slot.currentSpriteName || slot.currentMeshName || \"\";\r\n            const target = slot.currentSprite || slot.currentMesh;\r\n            if (name.endsWith(nameSuffix)) {\r\n                target.parentGroup = group;\r\n                list_n.push(target);\r\n            } else if (outGroup && target) {\r\n                target.parentGroup = outGroup;\r\n                list_d.push(target);\r\n            }\r\n        }\r\n        return [list_d, list_n];\r\n    };\r\n\r\n    destroy(options?: any): void {\r\n        for (let i = 0, n = this.skeleton.slots.length; i < n; i++) {\r\n            let slot = this.skeleton.slots[i];\r\n            for (let name in slot.meshes) {\r\n                slot.meshes[name].destroy(options);\r\n            }\r\n            slot.meshes = null;\r\n\r\n            for (let name in slot.sprites) {\r\n                slot.sprites[name].destroy(options);\r\n            }\r\n            slot.sprites = null;\r\n        }\r\n\r\n        for (let i = 0, n = this.slotContainers.length; i < n; i++) {\r\n            this.slotContainers[i].destroy(options);\r\n        }\r\n        this.spineData = null;\r\n        this.skeleton = null;\r\n        this.slotContainers = null;\r\n        this.stateData = null;\r\n        this.state = null;\r\n        this.tempClipContainers = null;\r\n\r\n        super.destroy(options);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * The visibility of the spine object. If false the object will not be drawn,\r\n * the updateTransform function will not be called, and the spine will not be automatically updated.\r\n *\r\n * @member {boolean}\r\n * @memberof spine.Spine#\r\n * @default true\r\n */\r\nObject.defineProperty(SpineBase.prototype, 'visible', {\r\n    get: function () {\r\n        return this._visible;\r\n    },\r\n    set: function (value: boolean) {\r\n        if (value !== this._visible) {\r\n            this._visible = value;\r\n            if (value) {\r\n                this.lastTime = 0;\r\n            }\r\n        }\r\n    }\r\n})\r\n"],"names":["AttachmentType","TextureFilter","TextureWrap","ALPHA_MODES","Rectangle","Texture","SCALE_MODES","MIPMAP_MODES","Sprite","SimpleMesh","Container","rgb2hex","hex2rgb","Transform","DRAW_MODES","Polygon","Graphics"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA;;;AAGYA;AAAZ,WAAY,cAAc;IACtB,uDAAM,CAAA;IAAE,iEAAW,CAAA;IAAE,mDAAI,CAAA;IAAE,+DAAU,CAAA;IAAE,mDAAI,CAAA;IAAE,qDAAK,CAAA;IAAE,2DAAQ,CAAA;AAChE,CAAC,EAFWA,sBAAc,KAAdA,sBAAc;;ACJ1B;;;;IAII,qBAAY,IAAgB,EAAS,OAA6B,EAAU,KAAiB,EAAU,MAAkC;QAApG,wBAAA,EAAA,cAAc,KAAK,EAAU;QAAU,sBAAA,EAAA,SAAiB;QAAU,uBAAA,EAAA,aAAa,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;QAApG,YAAO,GAAP,OAAO,CAAsB;QAAU,UAAK,GAAL,KAAK,CAAY;QAAU,WAAM,GAAN,MAAM,CAA4B;KAExI;IAED,8BAAQ,GAAR;QACI,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KAC5C;IAED,sCAAgB,GAAhB;QACI,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KAC7C;IAED,+BAAS,GAAT;QACI,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7C,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;QAChB,OAAO,KAAK,CAAC;KAChB;IAED,+BAAS,GAAT;QACI,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC5C,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;QAChB,OAAO,KAAK,CAAC;KAChB;IAED,6BAAO,GAAP,UAAQ,gBAAyB;QAC7B,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QACxB,IAAI,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE;YACjB,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YACpB,MAAM,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,CAAC;YAC1B,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE;gBACjB,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACpB,MAAM,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,EAAE,CAAC;gBAC3B,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE;oBACjB,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACpB,MAAM,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,EAAE,CAAC;oBAC3B,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE;wBACjB,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;wBACpB,MAAM,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,EAAE,CAAC;qBAC9B;iBACJ;aACJ;SACJ;QACD,OAAO,gBAAgB,GAAG,MAAM,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;KACvE;IAED,mCAAa,GAAb;QACI,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,OAAO,KAAK,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;KACtD;IAED,gCAAU,GAAV;QACI,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACnC,QAAQ,SAAS;YACb,KAAK,CAAC;gBACF,OAAO,IAAI,CAAC;YAChB,KAAK,CAAC;gBACF,OAAO,EAAE,CAAC;SACjB;QACD,SAAS,EAAE,CAAC;QACZ,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,GAAG;YAC5B,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YACxB,QAAQ,CAAC,IAAI,CAAC;gBACV,KAAK,EAAE,CAAC;gBACR,KAAK,EAAE;oBACH,KAAK,IAAI,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,EAAE,CAAC;oBACzE,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV,KAAK,EAAE;oBACH,KAAK,IAAI,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC,GAAG,IAAI,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,EAAE,CAAC;oBAC1G,CAAC,IAAI,CAAC,CAAC;oBACP,MAAM;gBACV;oBACI,KAAK,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBAChC,CAAC,EAAE,CAAC;aACX;SACJ;QACD,OAAO,KAAK,CAAC;KAChB;IAED,+BAAS,GAAT;QACI,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;QAChB,OAAO,KAAK,CAAC;KAChB;IAED,iCAAW,GAAX;QACI,OAAO,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;KAC/B;IACL,kBAAC;AAAD,CAAC;;AC9FD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa,GAAG,SAAS,CAAC,EAAE,CAAC,EAAE;AACnC,IAAI,aAAa,GAAG,MAAM,CAAC,cAAc;AACzC,SAAS,EAAE,SAAS,EAAE,EAAE,EAAE,YAAY,KAAK,IAAI,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC;AACpF,QAAQ,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AAC1G,IAAI,OAAO,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC;AACF;AACO,SAAS,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE;AAChC,IAAI,IAAI,OAAO,CAAC,KAAK,UAAU,IAAI,CAAC,KAAK,IAAI;AAC7C,QAAQ,MAAM,IAAI,SAAS,CAAC,sBAAsB,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,+BAA+B,CAAC,CAAC;AAClG,IAAI,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACxB,IAAI,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EAAE;AAC3C,IAAI,CAAC,CAAC,SAAS,GAAG,CAAC,KAAK,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;AACzF;;ACzBA;;;SAGgB,gBAAgB,CAAE,IAAY;IAC1C,QAAQ,IAAI,CAAC,WAAW,EAAE;QACtB,KAAK,SAAS,EAAE,OAAOC,qBAAa,CAAC,OAAO,CAAC;QAC7C,KAAK,QAAQ,EAAE,OAAOA,qBAAa,CAAC,MAAM,CAAC;QAC3C,KAAK,QAAQ,EAAE,OAAOA,qBAAa,CAAC,MAAM,CAAC;QAC3C,KAAK,sBAAsB,EAAE,OAAOA,qBAAa,CAAC,oBAAoB,CAAC;QACvE,KAAK,qBAAqB,EAAE,OAAOA,qBAAa,CAAC,mBAAmB,CAAC;QACrE,KAAK,qBAAqB,EAAE,OAAOA,qBAAa,CAAC,mBAAmB,CAAC;QACrE,KAAK,oBAAoB,EAAE,OAAOA,qBAAa,CAAC,kBAAkB,CAAC;QACnE,SAAS,MAAM,IAAI,KAAK,CAAC,4BAA0B,IAAM,CAAC,CAAC;KAC9D;AACL,CAAC;AAED;;;SAGgB,cAAc,CAAE,IAAY;IACxC,QAAQ,IAAI,CAAC,WAAW,EAAE;QACtB,KAAK,gBAAgB,EAAE,OAAOC,mBAAW,CAAC,cAAc,CAAC;QACzD,KAAK,aAAa,EAAE,OAAOA,mBAAW,CAAC,WAAW,CAAC;QACnD,KAAK,QAAQ,EAAE,OAAOA,mBAAW,CAAC,MAAM,CAAC;QACzC,SAAS,MAAM,IAAI,KAAK,CAAC,0BAAwB,IAAM,CAAC,CAAC;KAC5D;AACL,CAAC;AAED;;;AAGYD;AAAZ,WAAY,aAAa;IACrB,0DAAc,CAAA;IACd,wDAAa,CAAA;IACb,wDAAa,CAAA;IACb,oFAA2B,CAAA;IAC3B,kFAA0B,CAAA;IAC1B,kFAA0B,CAAA;IAC1B,gFAAyB,CAAA;AAC7B,CAAC,EARWA,qBAAa,KAAbA,qBAAa,QAQxB;AAED;;;AAGYC;AAAZ,WAAY,WAAW;IACnB,qEAAsB,CAAA;IACtB,+DAAmB,CAAA;IACnB,qDAAc,CAAA;AAClB,CAAC,EAJWA,mBAAW,KAAXA,mBAAW,QAItB;AAED;;;;IAGA;;QAII,SAAI,GAAc,IAAI,CAAC;QAEvB,UAAK,GAAa,IAAI,CAAC;QACvB,WAAM,GAAe,IAAI,CAAC;KA6E7B;IA3EG,sBAAI,gCAAK;aAAT;YACI,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;YACzB,IAAI,GAAG,CAAC,IAAI,EAAE;gBACV,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;aACzB;YACD,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;SACzB;;;OAAA;IAED,sBAAI,iCAAM;aAAV;YACI,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;YACzB,IAAI,GAAG,CAAC,IAAI,EAAE;gBACV,OAAO,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;aAC1B;YACD,OAAO,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;SAC1B;;;OAAA;IAED,sBAAI,4BAAC;aAAL;YACI,OAAQ,IAAI,CAAC,OAAe,CAAC,IAAI,CAAC,EAAE,CAAC;SACxC;;;OAAA;IAED,sBAAI,4BAAC;aAAL;YACI,OAAQ,IAAI,CAAC,OAAe,CAAC,IAAI,CAAC,EAAE,CAAC;SACxC;;;OAAA;IAED,sBAAI,6BAAE;aAAN;YACI,OAAQ,IAAI,CAAC,OAAe,CAAC,IAAI,CAAC,EAAE,CAAC;SACxC;;;OAAA;IAED,sBAAI,6BAAE;aAAN;YACI,OAAQ,IAAI,CAAC,OAAe,CAAC,IAAI,CAAC,EAAE,CAAC;SACxC;;;OAAA;IAED,sBAAI,kCAAO;aAAX;YACI,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;YACzB,OAAO,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;SACpC;;;OAAA;IAED,sBAAI,kCAAO;aAAX;;YAEI,OAAO,IAAI,CAAC,YAAY,CAAC;SAC5B;;;OAAA;IAED,sBAAI,sCAAW;aAAf;YACI,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;YACzB,OAAO,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;SACpC;;;OAAA;IAED,sBAAI,uCAAY;aAAhB;YACI,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;YACvB,OAAO,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,IAAI,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAC1E;;;OAAA;IAED,sBAAI,wCAAa;aAAjB;YACI,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;SAClC;;;OAAA;IAED,sBAAI,yCAAc;aAAlB;YACI,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;SACnC;;;OAAA;IAED,sBAAI,4BAAC;aAAL;YACI,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;SAC/B;;;OAAA;IAED,sBAAI,4BAAC;aAAL;YACI,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;SAC/B;;;OAAA;IAED,sBAAI,iCAAM;aAAV;YACI,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC;SACpC;;;OAAA;IAED,sBAAI,kCAAO;aAAX;YACI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,IAAI,GAAG,CAAC;SACjD;;;OAAA;IACL,oBAAC;AAAD,CAAC;;ACrID;IAAA;QACI,MAAC,GAAG,CAAC,CAAC;QACN,MAAC,GAAG,CAAC,CAAC;QACN,UAAK,GAAG,CAAC,CAAC;QACV,WAAM,GAAG,CAAC,CAAC;QACX,YAAO,GAAG,CAAC,CAAC;QACZ,YAAO,GAAG,CAAC,CAAC;QACZ,kBAAa,GAAG,CAAC,CAAC;QAClB,mBAAc,GAAG,CAAC,CAAC;QACnB,WAAM,GAAG,CAAC,CAAC;QACX,UAAK,GAAG,CAAC,CAAC;KACb;IAAD,mBAAC;AAAD,CAAC,IAAA;AACD;;;;IAOI,sBAAY,SAAkB,EAAE,aAAgF,EAAE,QAAqC;QAHvJ,UAAK,GAAG,IAAI,KAAK,EAAoB,CAAC;QACtC,YAAO,GAAG,IAAI,KAAK,EAAsB,CAAC;QAGtC,IAAI,SAAS,EAAE;YACX,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;SAC1D;KACJ;IAED,iCAAU,GAAV,UAAW,IAAY,EAAE,OAAgB;QACrC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACvB,IAAI,IAAI,GAAqB,IAAI,CAAC;QAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,KAAK,OAAO,CAAC,WAAW,EAAE;gBAC9C,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChB,MAAM;aACT;SACJ;QACD,IAAI,IAAI,KAAK,IAAI,EAAE;YACf,IAAI,GAAG,IAAI,gBAAgB,EAAE,CAAC;YAC9B,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC;YAC1B,IAAI,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;YACtC,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,SAAS,CAAC;YACnC,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,UAAU,CAAC;YACrC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;;YAE/B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,GAAGD,qBAAa,CAAC,OAAO,CAAC;YACxD,IAAI,CAAC,KAAK,GAAGC,mBAAW,CAAC,WAAW,CAAC;YACrC,IAAI,CAAC,KAAK,GAAGA,mBAAW,CAAC,WAAW,CAAC;YACrC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACpB;QACD,IAAI,MAAM,GAAG,IAAI,kBAAkB,EAAE,CAAC;QACtC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;QACnB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;QACnB,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;QACzB,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QAClB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1B,OAAO,MAAM,CAAC;KACjB;IAED,qCAAc,GAAd,UAAe,QAAsB,EAAE,cAAuB;QAC1D,KAAK,IAAI,GAAG,IAAI,QAAQ,EAAE;YACtB,IAAI,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBAC9B,IAAI,CAAC,UAAU,CAAC,cAAc,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;aACzH;SACJ;KACJ;IAEM,oCAAa,GAApB,UAAqB,SAAiB,EAAE,aAA+E,EAAE,QAAoC;QACzJ,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;KACxD;IAEO,2BAAI,GAAZ,UAAa,SAAiB,EAAE,aAA+E,EAAE,QAAoC;QAArJ,iBA0LC;QAzLG,IAAI,aAAa,IAAI,IAAI;YACrB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;QAErD,IAAI,MAAM,GAAG,IAAI,kBAAkB,CAAC,SAAS,CAAC,CAAC;QAC/C,IAAI,KAAK,GAAG,IAAI,KAAK,CAAS,CAAC,CAAC,CAAC;QACjC,IAAI,IAAI,GAAqB,IAAI,CAAC;QAClC,IAAI,UAAU,GAAkB,EAAE,CAAC;QACnC,IAAI,MAAM,GAAiB,IAAI,CAAC;QAChC,UAAU,CAAC,MAAM,CAAC,GAAG;YACjB,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACpC,CAAC;QACF,UAAU,CAAC,QAAQ,CAAC,GAAG;;SAEtB,CAAC;QACF,UAAU,CAAC,QAAQ,CAAC,GAAG;YACnB,IAAI,CAAC,SAAS,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,SAAS,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/C,CAAC;QACF,UAAU,CAAC,QAAQ,CAAC,GAAG;YACnB,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAAE,IAAI,CAAC,KAAK,GAAGA,mBAAW,CAAC,MAAM,CAAC;YACjE,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAAE,IAAI,CAAC,KAAK,GAAGA,mBAAW,CAAC,MAAM,CAAC;SACpE,CAAC;QACF,UAAU,CAAC,KAAK,CAAC,GAAG;YAChB,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC;SACjC,CAAC;QAEF,IAAI,YAAY,GAAkB,EAAE,CAAC;QACrC,YAAY,CAAC,IAAI,CAAC,GAAG;YACjB,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACjC,CAAC;QACF,YAAY,CAAC,MAAM,CAAC,GAAG;YACnB,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACtC,CAAC;QACF,YAAY,CAAC,QAAQ,CAAC,GAAG;YACrB,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACtC,CAAC;QACF,YAAY,CAAC,QAAQ,CAAC,GAAG;YACrB,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACvC,CAAC;QACF,YAAY,CAAC,MAAM,CAAC,GAAG;YACnB,MAAM,CAAC,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,cAAc,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SAC9C,CAAC;QACF,YAAY,CAAC,SAAS,CAAC,GAAG;YACtB,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,cAAc,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SAC9C,CAAC;QACF,YAAY,CAAC,QAAQ,CAAC,GAAG;YACrB,IAAI,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,MAAM,GAAG,CAAC,CAAC;YACf,IAAI,WAAW,CAAC,iBAAiB,EAAE,IAAI,MAAM,EAAE;gBAC3C,MAAM,GAAG,CAAC,CAAC;aACd;iBAAM,IAAI,WAAW,CAAC,iBAAiB,EAAE,IAAI,OAAO,EAAE;gBACnD,MAAM,GAAG,CAAC,CAAC;aACd;iBAAM;gBACH,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,GAAG,IAAI,EAAE,CAAC;aACzD;YACD,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;SAC1B,CAAC;QACF,YAAY,CAAC,OAAO,CAAC,GAAG;YACpB,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACrC,CAAC;QAEF,IAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;;QAE7B,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,IAAI,CAAC;YAC1C,IAAI,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;;QAE7B,OAAO,IAAI,EAAE;YACT,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,IAAI,CAAC;gBAAE,MAAM;YACnD,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC;gBAAE,MAAM;YAC9C,IAAI,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;SAC5B;QAED,IAAI,aAAa,GAAG;YAChB,OAAO,IAAI,EAAE;gBACT,IAAI,IAAI,IAAI,IAAI,EAAE;oBACd,OAAO,QAAQ,IAAI,QAAQ,CAAC,KAAI,CAAC,CAAC;iBACrC;gBACD,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,IAAI,CAAC,EAAE;oBACzB,IAAI,GAAG,IAAI,CAAC;oBACZ,IAAI,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;iBAC5B;qBAAM,IAAI,IAAI,KAAK,IAAI,EAAE;oBACtB,IAAI,GAAG,IAAI,gBAAgB,EAAE,CAAC;oBAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;oBAExB,OAAO,IAAI,EAAE;wBACT,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC;4BAAE,MAAM;wBAClE,IAAI,KAAK,GAAa,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC3C,IAAI,KAAK;4BAAE,KAAK,EAAE,CAAC;qBACtB;oBACD,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAEtB,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,OAAoB;wBAC1C,IAAI,OAAO,KAAK,IAAI,EAAE;4BAClB,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;4BAC/C,OAAO,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;yBACrC;wBACD,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC;;wBAE3B,IAAI,IAAI,CAAC,GAAG,EAAE;4BACV,OAAO,CAAC,SAAS,GAAGC,qBAAW,CAAC,GAAG,CAAC;yBACvC;wBACD,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;4BAChB,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;yBAC5C;wBACD,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACtB,IAAI,CAAC,UAAU,EAAE,CAAC;wBAElB,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;4BAC7B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC;4BAC/B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC;4BACjC,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gCAC7B,OAAO,CAAC,GAAG,CAAC,yBAAyB,GAAG,IAAI,CAAC,IAAI,GAAG,kIAAkI,CAAC,CAAC;6BAC3L;yBACJ;wBACD,aAAa,EAAE,CAAC;qBACnB,CAAC,CAAC;oBACH,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACtB,MAAM;iBACT;qBAAM;oBACH,MAAM,GAAG,IAAI,YAAY,EAAE,CAAC;oBAC5B,IAAI,WAAW,GAAG,IAAI,kBAAkB,EAAE,CAAC;oBAC3C,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC;oBACxB,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC;oBACxB,IAAI,KAAK,GAAa,IAAI,CAAC;oBAC3B,IAAI,MAAM,GAAe,IAAI,CAAC;oBAC9B,OAAO,IAAI,EAAE;wBACT,IAAI,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;wBAC9D,IAAI,KAAK,IAAI,CAAC;4BAAE,MAAM;wBACtB,IAAI,KAAK,GAAa,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC7C,IAAI,KAAK;4BACL,KAAK,EAAE,CAAC;6BACP;4BACD,IAAI,KAAK,IAAI,IAAI,EAAE;gCACf,KAAK,GAAG,EAAE,CAAC;gCACX,MAAM,GAAG,EAAE,CAAA;6BACd;4BACD,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;4BACrB,IAAI,WAAW,GAAa,EAAE,CAAC;4BAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE;gCAC1B,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC7C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;yBAC5B;qBACJ;oBACD,IAAI,MAAM,CAAC,aAAa,IAAI,CAAC,IAAI,MAAM,CAAC,cAAc,IAAI,CAAC,EAAE;wBACzD,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC;wBACpC,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC;qBACzC;oBAED,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;oBAC7C,MAAM,CAAC,CAAC,IAAI,UAAU,CAAC;oBACvB,MAAM,CAAC,CAAC,IAAI,UAAU,CAAC;oBACvB,MAAM,CAAC,KAAK,IAAI,UAAU,CAAC;oBAC3B,MAAM,CAAC,MAAM,IAAI,UAAU,CAAC;oBAC5B,MAAM,CAAC,aAAa,IAAI,UAAU,CAAC;oBACnC,MAAM,CAAC,cAAc,IAAI,UAAU,CAAC;oBACpC,MAAM,CAAC,OAAO,IAAI,UAAU,CAAC;oBAC7B,MAAM,CAAC,OAAO,IAAI,UAAU,CAAC;oBAE7B,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC;oBACvC,IAAI,KAAK,GAAG,IAAIC,cAAS,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;oBAE5H,IAAI,IAAI,GAAG,IAAIA,cAAS,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC,cAAc,CAAC,CAAC;oBAC5E,IAAI,IAAI,GAAG,IAAIA,cAAS,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;oBAE9H,WAAW,CAAC,OAAO,GAAG,IAAIC,YAAO,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;oBAClG,WAAW,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;oBACjC,WAAW,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;oBAEhC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;iBAClC;aACJ;SACJ,CAAC;QAEF,aAAa,EAAE,CAAC;KACnB;IAED,iCAAU,GAAV,UAAW,IAAY;QACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC1C,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,EAAE;gBAC9B,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;aAC1B;SACJ;QACD,OAAO,IAAI,CAAC;KACf;IAED,8BAAO,GAAP;QACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;SACvC;KACJ;IACL,mBAAC;AAAD,CAAC,IAAA;AAED;;;AAGA;IAII,4BAAY,IAAY;QAFxB,UAAK,GAAW,CAAC,CAAC;QAGd,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;KACzC;IAED,qCAAQ,GAAR;QACI,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM;YAC/B,OAAO,IAAI,CAAC;QAChB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KACnC;IAED,sCAAS,GAAT,UAAW,KAAe,EAAE,IAAY;QACpC,IAAI,IAAI,IAAI,IAAI;YAAE,OAAO,CAAC,CAAC;QAC3B,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QACnB,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC;YAAE,OAAO,CAAC,CAAC;QAE/B,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,KAAK,IAAI,CAAC,CAAC;YAAE,OAAO,CAAC,CAAC;QAC1B,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;QACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,SAAS,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE;YACzC,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;YACzC,IAAI,KAAK,IAAI,CAAC,CAAC,EAAE;gBACb,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC;gBACzC,OAAO,CAAC,CAAC;aACZ;YACD,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,GAAG,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC;YAC5D,SAAS,GAAG,KAAK,GAAG,CAAC,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC;gBAAE,OAAO,CAAC,CAAC;SACxB;KACJ;IACL,yBAAC;AAAD,CAAC,IAAA;AAED;;;;IAGA;QAEI,cAAS,GAAkBJ,qBAAa,CAAC,OAAO,CAAC;QACjD,cAAS,GAAkBA,qBAAa,CAAC,OAAO,CAAC;QACjD,UAAK,GAAgBC,mBAAW,CAAC,WAAW,CAAC;QAC7C,UAAK,GAAgBA,mBAAW,CAAC,WAAW,CAAC;KAsBhD;IAhBU,qCAAU,GAAjB;QACI,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC;QAC3B,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;QAC5B,IAAI,MAAM,IAAID,qBAAa,CAAC,MAAM,EAAE;YAChC,GAAG,CAAC,SAAS,GAAGK,qBAAW,CAAC,MAAM,CAAC;SACtC;aAAM,IAAI,IAAI,CAAC,SAAS,IAAIL,qBAAa,CAAC,OAAO,EAAE;YAChD,GAAG,CAAC,SAAS,GAAGK,qBAAW,CAAC,OAAO,CAAC;SACvC;aAAM;YACH,GAAG,CAAC,MAAM,GAAGC,sBAAY,CAAC,IAAI,CAAC;YAC/B,IAAI,MAAM,IAAIN,qBAAa,CAAC,oBAAoB,EAAE;gBAC9C,GAAG,CAAC,SAAS,GAAGK,qBAAW,CAAC,OAAO,CAAC;aACvC;iBAAM;gBACH,GAAG,CAAC,SAAS,GAAGA,qBAAW,CAAC,MAAM,CAAC;aACtC;SACJ;KACJ;IACL,uBAAC;AAAD,CAAC,IAAA;AAED;;;;IAGwC,sCAAa;IAArD;;KAIC;IAAD,yBAAC;AAAD,CAJA,CAAwC,aAAa;;AC9VrD,IAAI,eAAe,GAAG,CAAC,UAAS,KAAK;IACjC,OAAO,UAAS,CAAS;QACrB,OAAO,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;KACjC,CAAC;AACN,CAAC,EAAE,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;AAExB,IAAI,MAAM,GACL,IAAY,CAAC,MAAM,IAAI,eAAe,CAAC;AAQ5C;;;;IAGA;QACI,UAAK,GAAG,IAAI,KAAK,EAAU,CAAC;KAmB/B;IAjBG,oBAAG,GAAH,UAAK,KAAa;QACd,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACpC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;QAClC,OAAO,CAAC,QAAQ,CAAC;KACpB;IAED,yBAAQ,GAAR,UAAU,KAAa;QACnB,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC;KAC7C;IAED,uBAAM,GAAN,UAAQ,KAAa;QACjB,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;KACrC;IAED,sBAAK,GAAL;QACI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;KACzB;IACL,aAAC;AAAD,CAAC,IAAA;AAED;;;;IAGA;QACI,YAAO,GAAiB,EAAE,CAAC;QAC3B,SAAI,GAAG,CAAC,CAAC;KA2BZ;IAzBG,uBAAG,GAAH,UAAK,KAAa;QACd,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACnC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,QAAQ,EAAE;YACX,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;KAChB;IAED,0BAAM,GAAN,UAAQ,MAAgB;QACpB,IAAI,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;QACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;YACzC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACxB,OAAO,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC;KAC/B;IAED,4BAAQ,GAAR,UAAU,KAAa;QACnB,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;KAC9B;IAED,yBAAK,GAAL;QACI,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;KACjB;IACL,gBAAC;AAAD,CAAC,IAAA;AAgBD;;;;IAUI,eAAoB,CAAa,EAAS,CAAa,EAAS,CAAa,EAAS,CAAa;QAA/E,kBAAA,EAAA,KAAa;QAAS,kBAAA,EAAA,KAAa;QAAS,kBAAA,EAAA,KAAa;QAAS,kBAAA,EAAA,KAAa;QAA/E,MAAC,GAAD,CAAC,CAAY;QAAS,MAAC,GAAD,CAAC,CAAY;QAAS,MAAC,GAAD,CAAC,CAAY;QAAS,MAAC,GAAD,CAAC,CAAY;KAClG;IAED,mBAAG,GAAH,UAAK,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;QAC3C,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC;KACvB;IAED,4BAAY,GAAZ,UAAc,CAAQ;QAClB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACb,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACb,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACb,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACb,OAAO,IAAI,CAAC;KACf;IAED,6BAAa,GAAb,UAAe,GAAW;QACtB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QACjD,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC;QAC9C,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC;QAC9C,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC;QAC9C,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC;QACpE,OAAO,IAAI,CAAC;KACf;IAED,mBAAG,GAAH,UAAK,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;QAC3C,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;QACZ,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC;KACvB;IAED,qBAAK,GAAL;QACI,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;YAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;aACtB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;YAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QAEhC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;YAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;aACtB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;YAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QAEhC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;YAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;aACtB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;YAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QAEhC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;YAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;aACtB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;YAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QAChC,OAAO,IAAI,CAAC;KACf;IAEM,qBAAe,GAAtB,UAAuB,KAAY,EAAE,KAAa;QAC9C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,UAAU,MAAM,EAAE,IAAI,GAAG,CAAC;QAC9C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,UAAU,MAAM,EAAE,IAAI,GAAG,CAAC;QAC9C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,UAAU,MAAM,CAAC,IAAI,GAAG,CAAC;QAC7C,KAAK,CAAC,CAAC,GAAG,EAAE,KAAK,GAAG,UAAU,KAAK,GAAG,CAAC;KAC1C;IAEM,mBAAa,GAApB,UAAsB,KAAY,EAAE,KAAa;QAC7C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,UAAU,MAAM,EAAE,IAAI,GAAG,CAAC;QAC9C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,UAAU,MAAM,CAAC,IAAI,GAAG,CAAC;QAC7C,KAAK,CAAC,CAAC,GAAG,EAAE,KAAK,GAAG,UAAU,KAAK,GAAG,CAAC;KAC1C;IAEM,gBAAU,GAAjB,UAAmB,GAAY;QAC3B,OAAO,IAAI,KAAK,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;KACzC;IAxEa,WAAK,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9B,SAAG,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5B,WAAK,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9B,UAAI,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7B,aAAO,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAqElD,YAAC;CA1ED,IA0EC;AAED;;;;IAGA;KA6CC;IArCU,eAAK,GAAZ,UAAc,KAAa,EAAE,GAAW,EAAE,GAAW;QACjD,IAAI,KAAK,GAAG,GAAG;YAAE,OAAO,GAAG,CAAC;QAC5B,IAAI,KAAK,GAAG,GAAG;YAAE,OAAO,GAAG,CAAC;QAC5B,OAAO,KAAK,CAAC;KAChB;IAEM,gBAAM,GAAb,UAAe,OAAe;QAC1B,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;KAC/C;IAEM,gBAAM,GAAb,UAAe,OAAe;QAC1B,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;KAC/C;IAEM,gBAAM,GAAb,UAAe,KAAa;QACxB,OAAO,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;KAC7C;IAEM,eAAK,GAAZ,UAAc,CAAS;QACnB,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KAC/C;IAEM,cAAI,GAAX,UAAa,CAAS;QAClB,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,CAAC;QACnC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;KACzB;IAEM,0BAAgB,GAAvB,UAAyB,GAAW,EAAE,GAAW;QAC7C,OAAO,SAAS,CAAC,oBAAoB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC;KACtE;IAEM,8BAAoB,GAA3B,UAA6B,GAAW,EAAE,GAAW,EAAE,IAAY;QAC/D,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QACtB,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;QAClB,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC;YAAE,OAAO,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC;QACxE,OAAO,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;KACtD;IA3CM,YAAE,GAAG,SAAS,CAAC;IACf,aAAG,GAAG,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;IACvB,0BAAgB,GAAG,GAAG,GAAG,SAAS,CAAC,EAAE,CAAC;IACtC,gBAAM,GAAG,SAAS,CAAC,gBAAgB,CAAC;IACpC,0BAAgB,GAAG,SAAS,CAAC,EAAE,GAAG,GAAG,CAAC;IACtC,gBAAM,GAAG,SAAS,CAAC,gBAAgB,CAAC;IAuC/C,gBAAC;CA7CD,IA6CC;AAED;;;;IAGA;KAKC;IAHG,6BAAK,GAAL,UAAM,KAAa,EAAE,GAAW,EAAE,CAAS;QACvC,OAAO,KAAK,GAAG,CAAC,GAAG,GAAG,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;KACxD;IACL,oBAAC;AAAD,CAAC,IAAA;AAED;;;;IAGyB,uBAAa;IAGlC,aAAa,KAAa;QAA1B,YACI,iBAAO,SAEV;QALS,WAAK,GAAG,CAAC,CAAC;QAIhB,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;KACtB;IAED,2BAAa,GAAb,UAAe,CAAS;QACpB,IAAI,CAAC,IAAI,GAAG;YAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACrD,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;KACjF;IACL,UAAC;AAAD,CAZA,CAAyB,aAAa,GAYrC;AAED;;;;IAG4B,0BAAG;IAC3B,gBAAa,KAAa;eACtB,kBAAM,KAAK,CAAC;KACf;IAED,8BAAa,GAAb,UAAe,CAAS;QACpB,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;KAC3E;IACL,aAAC;AAAD,CARA,CAA4B,GAAG,GAQ9B;AAED;;;;IAGA;KA6EC;IA1EU,eAAS,GAAhB,UAAqB,MAAoB,EAAE,WAAmB,EAAE,IAAkB,EAAE,SAAiB,EAAE,WAAmB;QACtH,KAAK,IAAI,CAAC,GAAG,WAAW,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,WAAW,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE;YAC9E,IAAI,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;SACvB;KACJ;IAEM,eAAS,GAAhB,UAAqB,KAAmB,EAAE,SAAiB,EAAE,OAAe,EAAE,KAAQ;QAClF,KAAK,IAAI,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE;YACpC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;KACxB;IAEM,kBAAY,GAAnB,UAAwB,KAAe,EAAE,IAAY,EAAE,KAAc;QAAd,sBAAA,EAAA,SAAc;QACjE,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC;QAC3B,IAAI,OAAO,IAAI,IAAI;YAAE,OAAO,KAAK,CAAC;QAClC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;QACpB,IAAI,OAAO,GAAG,IAAI,EAAE;YAChB,KAAK,IAAI,CAAC,GAAG,OAAO,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE;gBAAE,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;SACzD;QACD,OAAO,KAAK,CAAC;KAChB;IAEM,yBAAmB,GAA1B,UAA+B,KAAe,EAAE,IAAY,EAAE,KAAc;QAAd,sBAAA,EAAA,SAAc;QACxE,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI;YAAE,OAAO,KAAK,CAAC;QACvC,OAAO,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;KACjD;IAEM,cAAQ,GAAf,UAAoB,IAAY,EAAE,YAAe;QAC7C,IAAI,KAAK,GAAG,IAAI,KAAK,CAAI,IAAI,CAAC,CAAC;QAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE;YAAE,KAAK,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC;QACvD,OAAO,KAAK,CAAC;KAChB;IAEM,mBAAa,GAApB,UAAsB,IAAY;QAC9B,IAAI,KAAK,CAAC,qBAAqB;YAC3B,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC,CAAA;aAC5B;YACD,IAAI,KAAK,GAAG,IAAI,KAAK,CAAS,IAAI,CAAC,CAAC;YACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;gBAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACpD,OAAO,KAAK,CAAC;SAChB;KACJ;IAEM,mBAAa,GAApB,UAAsB,IAAY;QAC9B,IAAI,KAAK,CAAC,qBAAqB;YAC3B,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,CAAA;aAC1B;YACD,IAAI,KAAK,GAAG,IAAI,KAAK,CAAS,IAAI,CAAC,CAAC;YACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;gBAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACpD,OAAO,KAAK,CAAC;SAChB;KACJ;IAEM,kBAAY,GAAnB,UAAqB,KAAoB;QACrC,OAAO,KAAK,CAAC,qBAAqB,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;KACxE;IAEM,uBAAiB,GAAxB,UAA0B,KAAa;QACnC,OAAO,KAAK,CAAC,qBAAqB,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;KAC9D;;IAGM,2BAAqB,GAA5B,UAA8B,KAAa,EAAE,KAAU;KAEtD;IAEM,cAAQ,GAAf,UAAoB,KAAe,EAAE,OAAU,EAAE,QAAe;QAC5D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;YACjC,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,OAAO;gBAAE,OAAO,IAAI,CAAC;QACzC,OAAO,KAAK,CAAC;KAChB;IAEM,eAAS,GAAhB,UAAkB,IAAS,EAAE,IAAY;QACrC,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KACtD;IA3EM,2BAAqB,GAAG,QAAO,YAAY,CAAC,KAAK,WAAW,CAAC;IA4ExE,YAAC;CA7ED,IA6EC;AAED;;;;IAGA;KAQC;IAPU,mBAAQ,GAAf,UAAgB,QAAmB;QAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC5C,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;SAC3H;KACJ;IACL,iBAAC;AAAD,CAAC,IAAA;AAED;;;;IAOI,cAAa,YAAqB;QAH1B,UAAK,GAAG,IAAI,KAAK,EAAK,CAAC;QAI3B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;KACpC;IAED,qBAAM,GAAN;QACI,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;KACzE;IAED,mBAAI,GAAJ,UAAM,IAAO;QACT,IAAK,IAAY,CAAC,KAAK;YAAG,IAAY,CAAC,KAAK,EAAE,CAAC;QAC/C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACzB;IAED,sBAAO,GAAP,UAAS,KAAmB;QACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;YACjC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KAC3B;IAED,oBAAK,GAAL;QACI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;KACzB;IACL,WAAC;AAAD,CAAC,IAAA;AAED;;;;IAII,iBAAoB,CAAK,EAAS,CAAK;QAAnB,kBAAA,EAAA,KAAK;QAAS,kBAAA,EAAA,KAAK;QAAnB,MAAC,GAAD,CAAC,CAAI;QAAS,MAAC,GAAD,CAAC,CAAI;KACtC;IAED,qBAAG,GAAH,UAAK,CAAS,EAAE,CAAS;QACrB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,OAAO,IAAI,CAAC;KACf;IAED,wBAAM,GAAN;QACI,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;QACf,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;QACf,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;KACnC;IAED,2BAAS,GAAT;QACI,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QACxB,IAAI,GAAG,IAAI,CAAC,EAAE;YACV,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC;YACd,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC;SACjB;QACD,OAAO,IAAI,CAAC;KACf;IACL,cAAC;AAAD,CAAC,IAAA;AAED;;;;IAGA;QACI,aAAQ,GAAG,KAAK,CAAC;QACjB,oBAAe,GAAG,CAAC,CAAC;QACpB,UAAK,GAAG,CAAC,CAAC;QACV,cAAS,GAAG,CAAC,CAAC;QAEN,aAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;QAC7B,eAAU,GAAG,CAAC,CAAC;QACf,cAAS,GAAG,CAAC,CAAC;KAiBzB;IAfG,2BAAM,GAAN;QACI,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC;QAC7B,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC;QAC7B,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ;YAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC3D,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;QAEpB,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE;YACpB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;YACxD,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;SACvB;KACJ;IACL,iBAAC;AAAD,CAAC,IAAA;AAUD;;;;IAUI,sBAAa,UAAuB;QAAvB,2BAAA,EAAA,eAAuB;QALpC,gBAAW,GAAG,CAAC,CAAC;QAChB,cAAS,GAAG,CAAC,CAAC;QACd,SAAI,GAAG,CAAC,CAAC;QACT,UAAK,GAAG,IAAI,CAAC;QAGT,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAS,UAAU,CAAC,CAAC;KAC/C;IAED,oCAAa,GAAb;QACI,OAAO,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;KACjD;IAED,+BAAQ,GAAR,UAAU,KAAa;QACnB,IAAI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM;YAAE,IAAI,CAAC,WAAW,EAAE,CAAC;QAC9D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,GAAG,KAAK,CAAC;QACtC,IAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC;YAAE,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QAChE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;KACrB;IAED,8BAAO,GAAP;QACI,IAAI,IAAI,CAAC,aAAa,EAAE,EAAE;YACtB,IAAI,IAAI,CAAC,KAAK,EAAE;gBACZ,IAAI,IAAI,GAAG,CAAC,CAAC;gBACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE;oBACvC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;gBACtC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;aACtB;YACD,OAAO,IAAI,CAAC,IAAI,CAAC;SACpB;QACD,OAAO,CAAC,CAAC;KACZ;IACL,mBAAC;AAAD,CAAC;;AC1eD;;;IAGW,QAAQ,GAAG;IAClB,KAAK,EAAE,IAAI;;;;;IAKX,yBAAyB,EAAE,KAAK;;;;IAKhC,kBAAkB,EAAE,IAAI;;;;IAKxB,kBAAkB,EAAE,CAAC;;;ACMzB,IAAI,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAUxB;;;;IAGiC,+BAAM;IAAvC;QAAA,qEAGC;QAFG,YAAM,GAAmB,IAAI,CAAC;QAC9B,gBAAU,GAAiB,IAAI,CAAC;;KACnC;IAAD,kBAAC;AAAD,CAHA,CAAiCE,aAAM,GAGtC;AAED;;;;IAG+B,6BAAU;IAIrC,mBAAY,OAAgB,EAAE,QAAuB,EAAE,GAAkB,EAAE,OAAqB,EAAE,QAAiB;QAAnH,YACI,kBAAM,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,SACnD;QALD,YAAM,GAAmB,IAAI,CAAC;QAC9B,gBAAU,GAAiB,IAAI,CAAC;;KAI/B;IACL,gBAAC;AAAD,CAPA,CAA+BC,qBAAU,GAOxC;AAED;;;;;;;;;;;;;;;;IAmBY,6BAAS;IAejB,mBAAY,SAAuB;QAAnC,YACI,iBAAO,SAyEV;QAvEG,IAAI,CAAC,SAAS,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;SACvD;QAED,IAAI,CAAC,OAAO,SAAS,MAAM,QAAQ,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,qGAAqG,CAAC,CAAC;SAC1H;;;;;;QAOD,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;;;;;;QAO3B,KAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;;;;;;QAO/B,KAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QAEzB,KAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QAE7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACxD,IAAI,IAAI,GAAG,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,UAAU,GAAQ,IAAI,CAAC,aAAa,EAAE,CAAC;YAC3C,IAAI,aAAa,GAAG,KAAI,CAAC,YAAY,EAAE,CAAC;YACxC,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACxC,KAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;YAC7B,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEnC,IAAI,CAAC,UAAU,EAAE;gBACb,SAAS;aACZ;YACD,IAAI,UAAU,CAAC,IAAI,KAAKT,sBAAc,CAAC,MAAM,EAAE;gBAC3C,IAAI,UAAU,GAAI,UAAU,CAAC,MAA6B,CAAC,IAAI,CAAC;gBAChE,IAAI,MAAM,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,EAAE,UAA+B,EAAE,UAAU,CAAC,CAAC;gBAClF,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;gBAC5B,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;gBACpC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;aAClC;iBAAM,IAAI,UAAU,CAAC,IAAI,KAAKA,sBAAc,CAAC,IAAI,EAAE;gBAChD,IAAI,IAAI,GAAG,KAAI,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;gBAC7C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;gBACxB,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC,EAAE,CAAC;gBACnC,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC,IAAI,CAAC;gBACvC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aAChC;iBAAM,IAAI,UAAU,CAAC,IAAI,KAAKA,sBAAc,CAAC,QAAQ,EAAE;gBACpD,KAAI,CAAC,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;gBACtC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBAC/C,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aAChD;SACJ;;;;;;;QAQD,KAAI,CAAC,OAAO,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAE3C,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;;KACvB;IAaD,sBAAI,iCAAU;;;;;;;;;;;;aAAd;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;SAC3B;aAED,UAAe,KAAc;YACzB,IAAI,KAAK,KAAK,IAAI,CAAC,WAAW,EAAE;gBAC5B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;gBACzB,IAAI,CAAC,eAAe,GAAG,KAAK,GAAG,SAAS,CAAC,SAAS,CAAC,mBAAmB,GAAGU,iBAAS,CAAC,SAAS,CAAC,eAAe,CAAC;aAChH;SACJ;;;OAPA;IAgBD,sBAAI,2BAAI;;;;;;;;aAAR;YACI,OAAOC,aAAO,CAAC,IAAI,CAAC,OAAc,CAAC,CAAC;SACvC;aAED,UAAS,KAAa;YAClB,IAAI,CAAC,OAAO,GAAGC,aAAO,CAAC,KAAK,EAAE,IAAI,CAAC,OAAc,CAAC,CAAC;SACtD;;;OAJA;IAWD,sBAAI,iCAAU;;;;;;aAAd;YACI,IAAI,KAAK,GAAG,OAAO,IAAI,CAAC,eAAe,KAAK,WAAW;gBACnD,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,kBAAkB,CAAC;;YAGvD,OAAO,KAAK,IAAI,MAAM,CAAC,SAAS,CAAA;SACnC;;;OAAA;;;;;;IAOD,0BAAM,GAAN,UAAO,EAAU;;QAEb,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACjC,IAAI,EAAE,GAAG,UAAU;YAAE,EAAE,GAAG,UAAU,CAAC;QAErC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACtB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;QAGhC,IAAI,CAAC,IAAI,CAAC,QAAQ;YACd,OAAO;QAEX,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE,CAAC;QAErC,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;;QAGhC,IAAI,SAAS,GAAI,IAAY,CAAC,KAAK,CAAC;QACpC,IAAI,KAAK,GAAsB,IAAI,EAAE,IAAI,GAAsB,IAAI,CAAC;QAEpE,IAAI,SAAS,EAAE;YACX,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;YACxB,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;SACzB;aAAM;YACH,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC;SACxB;;QAID,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YACtC,IAAI,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YAE3C,IAAI,CAAC,UAAU,EAAE;gBACb,aAAa,CAAC,OAAO,GAAG,KAAK,CAAC;gBAC9B,SAAS;aACZ;YAED,IAAI,WAAW,GAAQ,IAAI,CAAC;YAE5B,IAAI,QAAQ,GAAI,UAAkB,CAAC,KAAK,CAAC;YACzC,QAAQ,UAAU,CAAC,IAAI;gBACnB,KAAKZ,sBAAc,CAAC,MAAM;oBACtB,IAAI,MAAM,GAAI,UAAgC,CAAC,MAAM,CAAC;oBACtD,IAAI,MAAM,EAAE;wBACR,IAAI,IAAI,CAAC,WAAW,EAAE;4BAClB,IAAI,CAAC,WAAW,CAAC,OAAO,GAAG,KAAK,CAAC;4BACjC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;4BACxB,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;4BAC/B,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;yBACpC;wBACD,IAAI,EAAE,GAAG,MAA4B,CAAC;wBACtC,IAAI,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,KAAK,EAAE,CAAC,IAAI,EAAE;4BAC/D,IAAI,UAAU,GAAG,EAAE,CAAC,IAAI,CAAC;4BACzB,IAAI,IAAI,CAAC,aAAa,EAAE;gCACpB,IAAI,CAAC,aAAa,CAAC,OAAO,GAAG,KAAK,CAAC;6BACtC;4BACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC;4BAClC,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,SAAS,EAAE;gCACxC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;6BAC3C;iCAAM;gCACH,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,UAA+B,EAAE,UAAU,CAAC,CAAC;gCAClF,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;6BAClC;4BACD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;4BAC9C,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;;;yBAIvC;6BAAM,IAAI,IAAI,CAAC,iBAAiB,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;4BAC/D,IAAI,CAAC,eAAe,CAAC,UAA+B,EAAE,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;yBACrF;qBACJ;oBAED,IAAI,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;oBACxC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAE1C,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE;;wBAE1B,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC;qBAC1C;yBAAM;wBACH,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBAClD,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBAClD,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBAClD,IAAI,CAAC,aAAa,CAAC,IAAI,GAAGW,aAAO,CAAC,OAAO,CAAC,CAAC;qBAC9C;oBACD,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAC9C,MAAM;gBAEV,KAAKX,sBAAc,CAAC,IAAI;oBACpB,IAAI,IAAI,CAAC,aAAa,EAAE;;wBAEpB,IAAI,CAAC,aAAa,CAAC,OAAO,GAAG,KAAK,CAAC;wBACnC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;wBAC1B,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;;wBAGnC,IAAM,WAAS,GAAG,IAAIa,cAAS,EAAE,CAAC;wBACjC,WAAiB,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;wBACjC,WAAiB,CAAC,QAAQ,GAAI,aAAa,CAAC,SAAiB,CAAC,QAAQ,CAAC;wBACxE,aAAa,CAAC,SAAS,GAAG,WAAS,CAAC;qBACvC;oBACD,IAAM,EAAE,GAAI,UAAgC,CAAC,EAAE,CAAC;oBAChD,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,KAAK,EAAE,EAAE;wBAClD,IAAI,MAAM,GAAG,EAAE,CAAC;wBAChB,IAAI,IAAI,CAAC,WAAW,EAAE;4BAClB,IAAI,CAAC,WAAW,CAAC,OAAO,GAAG,KAAK,CAAC;yBACpC;wBAED,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;wBAEhC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,SAAS,EAAE;4BACnC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;yBACtC;6BAAM;4BACH,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,UAA6B,CAAC,CAAC;4BAChE,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;yBAChC;wBAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;wBACvC,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC,IAAI,CAAC;wBACvC,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;qBAC/B;oBACA,UAAgC,CAAC,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;oBAC3F,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;;wBAExB,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;qBACxC;yBAAM;wBACH,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBAClD,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBAClD,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBAClD,IAAI,CAAC,WAAW,CAAC,IAAI,GAAGF,aAAO,CAAC,OAAO,CAAC,CAAC;qBAC5C;oBACD,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAC5C,MAAM;gBACV,KAAKX,sBAAc,CAAC,QAAQ;oBACxB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;wBACvB,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,UAAiC,CAAC,CAAC;wBAC7D,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;wBAC/C,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;qBAChD;oBACD,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,UAAiC,CAAC,CAAC;oBAC7D,aAAa,CAAC,KAAK,GAAG,GAAG,CAAC;oBAC1B,aAAa,CAAC,OAAO,GAAG,IAAI,CAAC;oBAC7B,SAAS;gBACb;oBACI,aAAa,CAAC,OAAO,GAAG,KAAK,CAAC;oBAC9B,SAAS;aAChB;YACD,aAAa,CAAC,OAAO,GAAG,IAAI,CAAC;;YAG7B,IAAI,WAAW,EAAE;gBACb,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;gBACnC,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;gBACnC,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;;gBAGnC,WAAW,CAAC,QAAQ,CAChB,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,CAAC,EACpC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,CAAC,EACpC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,CAAC,CACvC,CAAC;gBACF,IAAI,IAAI,CAAC,SAAS,EAAE;oBAChB,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oBACtB,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oBACtB,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;iBACzB;qBAAM;oBACH,EAAE,GAAG,GAAG,CAAC;oBACT,EAAE,GAAG,GAAG,CAAC;oBACT,EAAE,GAAG,GAAG,CAAC;iBACZ;gBACD,WAAW,CAAC,OAAO,CACf,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAClC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAClC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CACrC,CAAC;aACL;YAED,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;SACtC;;;QAID,IAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;QACxC,IAAI,kBAAkB,GAAwB,IAAI,CAAC;QACnD,IAAI,iBAAiB,GAAc,IAAI,CAAC;QAExC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC9C,IAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1C,IAAI,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEjE,IAAI,CAAC,iBAAiB,EAAE;;gBAEpB,IAAI,aAAa,CAAC,MAAM,KAAK,IAAI,IAAI,aAAa,CAAC,MAAM,KAAK,IAAI,EAAE;oBAChE,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;;oBAE/C,aAAqB,CAAC,MAAM,GAAG,IAAI,CAAC;iBACxC;aACJ;YACD,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,aAAa,EAAE,EAAE;gBAC9C,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC;gBAC3C,kBAAkB,GAAG,IAAI,CAAC,aAAa,EAAyB,CAAC;gBACjE,iBAAiB,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;gBACtC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC;gBAEjC,IAAI,kBAAkB,CAAC,OAAO,KAAK,IAAI,CAAC,IAAI,EAAE;oBAC1C,kBAAkB,CAAC,OAAO,GAAG,IAAI,CAAC;iBACrC;aAEJ;iBAAM;gBACH,IAAI,iBAAiB,EAAE;oBACnB,IAAI,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;oBACnC,IAAI,CAAC,CAAC,EAAE;wBACJ,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;wBACrD,CAAC,CAAC,OAAO,GAAG,KAAK,CAAC;qBACrB;oBACD,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;;oBAGpB,aAAqB,CAAC,MAAM,GAAG,IAAI,CAAC;oBACrC,iBAAiB,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;oBAC1C,IAAI,kBAAkB,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE;wBACzC,iBAAiB,CAAC,UAAU,GAAG,IAAI,CAAC;wBACpC,iBAAiB,GAAG,IAAI,CAAC;wBACzB,kBAAkB,GAAG,IAAI,CAAC;qBAC7B;iBACJ;qBAAM;oBACH,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC;iBACpC;aACJ;SACJ;KACJ;IAEO,mCAAe,GAAvB,UAAwB,UAA6B,EAAE,MAAmB,EAAE,MAAqB;;QAE7F,IAAI,MAAM,CAAC,UAAU,KAAK,UAAU,IAAI,MAAM,CAAC,MAAM,KAAK,MAAM,EAAE;YAC9D,OAAO;SACV;QAED,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,MAAM,CAAC,UAAU,GAAG,UAAU,CAAC;QAE/B,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAChC,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC;QACzD,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QAElC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;YACd,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,KAAK,GAAG,MAAM,CAAC,aAAa,CAAC;YAC7E,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC;SACnF;aAAM;;YAEH,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,aAAa,CAAC;YAC1D,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC;SAChE;KACJ;IAEO,iCAAa,GAArB,UAAsB,UAA2B,EAAE,IAAe,EAAE,MAAqB;QAErF,IAAI,IAAI,CAAC,UAAU,KAAK,UAAU,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE;YAC1D,OAAO;SACV;QAED,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;QAC3B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;KAC9C;;;;;;IASD,uCAAmB,GAAnB;QACI,IAAI,QAAQ,CAAC,kBAAkB,EAAE;YAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;YAC5C,IAAI,SAAS,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC;YACrD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;SAC1B;aAAM;YACH,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;SACrB;QAEDU,iBAAS,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAClD;;;;;;;;IASD,gCAAY,GAAZ,UAAa,IAAW,EAAE,UAA6B,EAAE,OAAe;QACpE,IAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;QAC/B,IAAI,IAAI,CAAC,cAAc,KAAK,UAAU,EAAE;YACpC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;SAC5B;QACD,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC7B,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAErC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;QAE5D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC;QAClC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;QAC/B,OAAO,MAAM,CAAC;KACjB;;;;;;;IAQD,8BAAU,GAAV,UAAW,IAAW,EAAE,UAA2B;QAC/C,IAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;QAC/B,IAAI,IAAI,CAAC,cAAc,KAAK,UAAU,EAAE;YACpC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;YACzB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SAC1B;QACD,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CACpB,MAAM,CAAC,OAAO,EACd,IAAI,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,EAC7C,UAAU,CAAC,SAAS,EACpB,IAAI,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,EACrCI,oBAAU,CAAC,SAAS,CAAC,CAAC;QAE1B,IAAI,OAAQ,KAAa,CAAC,cAAc,KAAK,WAAW,EAAE;YACrD,KAAa,CAAC,cAAc,GAAG,GAAG,CAAC;SACvC;QAED,KAAK,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QAEjC,KAAK,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;QACjC,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAE9C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;QAChC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;QACnC,OAAO,KAAK,CAAC;KAChB;;IAKD,kCAAc,GAAd,UAAe,IAAW,EAAE,IAAyB;QACjD,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAClC,IAAI,IAAI,GAAG,IAAIC,YAAO,CAAC,EAAE,CAAC,CAAC;QAC3B,QAAQ,CAAC,KAAK,EAAE,CAAC;QACjB,QAAQ,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAChC,QAAQ,CAAC,WAAW,CAAC,IAAW,CAAC,CAAC;QAClC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAC;QAC5B,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;QAChC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAC7C,IAAI,CAAC,iBAAiB,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC;QAEnD,OAAO,QAAQ,CAAC;KACnB;IAED,kCAAc,GAAd,UAAe,IAAW,EAAE,IAAyB;QACjD,IAAI,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC;QACzC,IAAI,QAAQ,GAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,KAAiB,CAAC,MAAM,CAAC;QAC9D,IAAI,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC;QACjC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;QACpB,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACtD,IAAI,CAAC,UAAU,EAAE,CAAC;KACrB;;;;;;;;;;;IAYD,0CAAsB,GAAtB,UAAuB,SAAiB,EAAE,OAAuB,EAAE,IAAsB;QAA/C,wBAAA,EAAA,cAAuB;QAAE,qBAAA,EAAA,WAAsB;QACrF,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC1C,IAAI,CAAC,IAAI,EAAE;YACP,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,UAAU,GAAQ,IAAI,CAAC,aAAa,EAAE,CAAC;QAC3C,IAAI,MAAM,GAAkB,UAAU,CAAC,MAAM,CAAC;QAC9C,IAAI,OAAO,EAAE;YACT,MAAM,GAAG,IAAI,aAAa,EAAE,CAAC;YAC7B,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;YACzB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;YACnB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;YACzB,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC;SACpC;aAAM;YACH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;SAC9B;QACD,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,IAAI,MAAM,EAAE;YAC3D,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;YAC7D,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC;SACtC;aAAM,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,IAAI,MAAM,EAAE;YAC9D,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;SAC5D;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;IAYD,yCAAqB,GAArB,UAAsB,QAAgB,EAAE,OAAuB,EAAE,IAAsB;QAA/C,wBAAA,EAAA,cAAuB;QAAE,qBAAA,EAAA,WAAsB;QACnF,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAClD,IAAI,KAAK,IAAI,CAAC,CAAC,EAAE;YACb,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;KAC5D;;;;;;;;;;;;IAaD,yCAAqB,GAArB,UAAsB,QAAgB,EAAE,cAAsB,EAAE,OAAO,EAAE,IAAsB;QAAtB,qBAAA,EAAA,WAAsB;;QAE3F,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;QACvD,IAAM,UAAU,GAAQ,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAA;QACnF,UAAU,CAAC,MAAM,CAAC,OAAO,GAAG,OAAO,CAAA;QAEnC,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAA;QAC3C,IAAI,CAAC,IAAI,EAAE;YACP,OAAO,KAAK,CAAA;SACf;;QAGD,IAAM,iBAAiB,GAAQ,IAAI,CAAC,aAAa,EAAE,CAAA;QACnD,IAAI,cAAc,KAAK,iBAAiB,CAAC,IAAI,EAAE;;YAE3C,IAAI,MAAM,GAAkB,UAAU,CAAC,MAAM,CAAA;YAC7C,IAAI,OAAO,EAAE;gBACT,MAAM,GAAG,IAAI,aAAa,EAAE,CAAA;gBAC5B,MAAM,CAAC,OAAO,GAAG,OAAO,CAAA;gBACxB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAA;gBAClB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAA;gBACxB,IAAI,CAAC,cAAc,GAAG,iBAAiB,CAAA;aAC1C;iBAAM;gBACH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;gBACtB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAA;aAC7B;YACD,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,IAAI,MAAM,EAAE;gBAC3D,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAAA;gBACnE,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,MAAM,CAAA;aACrC;iBAAM,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,IAAI,MAAM,EAAE;gBAC9D,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAA;aAClE;YACD,OAAO,IAAI,CAAA;SACd;QACD,OAAO,KAAK,CAAA;KACf;;IAGD,gCAAY,GAAZ;QACI,OAAO,IAAIL,iBAAS,EAAE,CAAC;KAC1B;IAED,6BAAS,GAAT,UAAU,GAAY;QAClB,OAAO,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC;KAC/B;IAED,+BAAW,GAAX;QACI,OAAO,IAAIM,iBAAQ,EAAE,CAAC;KACzB;IAED,2BAAO,GAAP,UAAQ,OAAgB,EAAE,QAAuB,EAAE,GAAkB,EAAE,OAAqB,EAAE,QAAiB;QAC3G,OAAO,IAAI,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;KACnE;IAED,iCAAa,GAAb;QACI,OAAO,CAAC,CAAC;KACZ;;;;;;;IAQD,wCAAoB,GAApB,UAAqB,UAAkB,EAAE,KAAU,EAAE,QAAa;QAC9D,IAAI,CAAC,UAAU,EAAE;YACb,OAAO,SAAS,CAAC;SACpB;QACD,IAAM,MAAM,GAAG,EAAE,EAAE,MAAM,GAAG,EAAE,CAAC;QAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC5D,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACpC,IAAM,MAAI,GAAG,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,eAAe,IAAI,EAAE,CAAC;YAClE,IAAM,MAAM,GAAG,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,WAAW,CAAC;YACtD,IAAI,MAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;gBAC3B,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACvB;iBAAM,IAAI,QAAQ,IAAI,MAAM,EAAE;gBAC3B,MAAM,CAAC,WAAW,GAAG,QAAQ,CAAC;gBAC9B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACvB;SACJ;QACD,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;KAC3B;IAED,2BAAO,GAAP,UAAQ,OAAa;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACxD,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAClC,KAAK,IAAI,MAAI,IAAI,IAAI,CAAC,MAAM,EAAE;gBAC1B,IAAI,CAAC,MAAM,CAAC,MAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;aACtC;YACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YAEnB,KAAK,IAAI,MAAI,IAAI,IAAI,CAAC,OAAO,EAAE;gBAC3B,IAAI,CAAC,OAAO,CAAC,MAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;aACvC;YACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACvB;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACxD,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;SAC3C;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAE/B,iBAAM,OAAO,YAAC,OAAO,CAAC,CAAC;KAC1B;IAxMM,yBAAe,GAAkB,EAAE,CAAC;IAyM/C,gBAAC;CAAA,CAxrBWN,iBAAS,GAwrBpB;AAGD;;;;;;;;AAQA,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,EAAE;IAClD,GAAG,EAAE;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC;KACxB;IACD,GAAG,EAAE,UAAU,KAAc;QACzB,IAAI,KAAK,KAAK,IAAI,CAAC,QAAQ,EAAE;YACzB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,IAAI,KAAK,EAAE;gBACP,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;aACrB;SACJ;KACJ;CACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;"}